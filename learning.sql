-- phpMyAdmin SQL Dump
-- version 4.5.1
-- http://www.phpmyadmin.net
--
-- Host: 127.0.0.1
-- Generation Time: Nov 21, 2018 at 05:45 PM
-- Server version: 10.1.16-MariaDB
-- PHP Version: 7.0.9

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `learning`
--

-- --------------------------------------------------------

--
-- Table structure for table `content`
--

CREATE TABLE `content` (
  `id` int(3) NOT NULL,
  `cid` int(3) NOT NULL,
  `did` int(3) NOT NULL,
  `topic` varchar(100) NOT NULL,
  `body` text NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `content`
--

INSERT INTO `content` (`id`, `cid`, `did`, `topic`, `body`) VALUES
(1, 7, 1, 'C++ Tutorial', '<p>C++ is a middle-level programming language developed by Bjarne Stroustrup starting in 1979 at Bell Labs. C++ runs on a variety of platforms, such as Windows, Mac OS, and the various versions of UNIX. This tutorial adopts a simple and practical approach to describe the concepts of C++.</p>\n<h1>Audience</h1>\n<p>This tutorial has been prepared for the beginners to help them understand the basic to advanced concepts related to C++.</p>\n<h1>Prerequisites</h1>\n<p>Before you start practicing with various types of examples given in this tutorial,we are making an assumption that you are already aware of the basics of computer program and computer programming language.</p>'),
(2, 7, 2, 'C++ Overview', '<p>C++ is a statically typed, compiled, general-purpose, case-sensitive, free-form programming language that supports procedural, object-oriented, and generic programming.</p>\n<p>C++ is regarded as a <b>middle-level</b> language, as it comprises a combination of both high-level and low-level language features.</p>\n<p>C++ was developed by Bjarne Stroustrup starting in 1979 at Bell Labs in Murray Hill, New Jersey, as an enhancement to the C language and originally named C with Classes but later it was renamed C++ in 1983.</p>\n<p>C++ is a superset of C, and that virtually any legal C program is a legal C++ program.</p>\n<p><b>Note</b> &minus; A programming language is said to use static typing when type checking is performed during compile-time as opposed to run-time.</p>\n<h2>Object-Oriented Programming</h2>\n<p>C++ fully supports object-oriented programming, including the four pillars of object-oriented development &minus;</p>\n<ul class="list">\n<li>Encapsulation</li>\n<li>Data hiding</li>\n<li>Inheritance</li>\n<li>Polymorphism</li>\n</ul>\n<h2>Standard Libraries</h2>\n<p>Standard C++ consists of three important parts &minus;</p>\n<ul class="list">\n<li><p>The core language giving all the building blocks including variables, data types and literals, etc.</p></li>\n<li><p>The C++ Standard Library giving a rich set of functions manipulating files, strings, etc.</p></li>\n<li><p>The Standard Template Library (STL) giving a rich set of methods manipulating data structures, etc.</p></li>\n</ul>\n<h2>The ANSI Standard</h2>\n<p>The ANSI standard is an attempt to ensure that C++ is portable; that code you write for Microsoft''s compiler will compile without errors, using a compiler on a Mac, UNIX, a Windows box, or an Alpha.</p>\n<p>The ANSI standard has been stable for a while, and all the major C++ compiler manufacturers support the ANSI standard.</p>\n<h2>Learning C++</h2>\n<p>The most important thing while learning C++ is to focus on concepts.</p>\n<p>The purpose of learning a programming language is to become a better programmer; that is, to become more effective at designing and implementing new systems and at maintaining old ones.</p>\n<p>C++ supports a variety of programming styles. You can write in the style of Fortran, C, Smalltalk, etc., in any language. Each style can achieve its aims effectively while maintaining runtime and space efficiency.</p>\n<h2>Use of C++</h2>\n<p>C++ is used by hundreds of thousands of programmers in essentially every application domain.</p>\n<p>C++ is being highly used to write device drivers and other software that rely on direct manipulation of hardware under realtime constraints.</p>\n<p>C++ is widely used for teaching and research because it is clean enough for successful teaching of basic concepts.</p>\n<p>Anyone who has used either an Apple Macintosh or a PC running Windows has indirectly used C++ because the primary user interfaces of these systems are written in C++.</p>'),
(3, 7, 3, 'C++ decision making statements', '<p>Decision making structures require that the programmer specify one or more conditions to be evaluated or tested by the program, along with a statement or statements to be executed if the condition is determined to be true, and optionally, other statements to be executed if the condition is determined to be false.</p>\n<p>Following is the general form of a typical decision making structure found in most of the programming languages &minus;</p>\n<p>C++ programming language provides following types of decision making statements.</p>\n<table class="table table-bordered">\n<tr>\n<th>Sr.No</th>\n<th style="text-align:center;">Statement &amp; Description</th>\n</tr>\n<tr>\n<td class="ts">1</td>\n<td>if statement\n<p>An if statement consists of a boolean expression followed by one or more statements.</p></td>\n</tr>\n<tr>\n<td class="ts">2</td>\n<td>if...else statement\n<p>An if statement can be followed by an optional else statement, which executes when the boolean expression is false.</p></td>\n</tr>\n<tr>\n<td class="ts">3</td>\n<td>switch statement</a>\n<p>A switch statement allows a variable to be tested for equality against a list of values.</p></td>\n</tr>\n<tr>\n<td class="ts">4</td>\n<td>nested if statements</a>\n<p>You can use one if or else if statement inside another if or else if statement(s).</p></td>\n</tr>\n<tr>\n<td class="ts">5</td>\n<td>nested switch statements</a>\n<p>You can use one switch statement inside another switch statement(s).</p></td>\n</tr>\n</table>\n<h2>The ? : Operator</h2>\n<p>We have covered conditional operator ? : in previous chapter which can be used to replace <b>if...else</b> statements. It has the following general form &minus;</p>\n<pre class="result notranslate">\nExp1 ? Exp2 : Exp3;\n</pre>\n<p>Exp1, Exp2, and Exp3 are expressions. Notice the use and placement of the colon.</p>\n<p>The value of a ? expression is determined like this: Exp1 is evaluated. If it is true, then Exp2 is evaluated and becomes the value of the entire ? expression. If Exp1 is false, then Exp3 is evaluated and its value becomes the value of the expression.</p>\n<hr />'),
(4, 1, 1, 'HTML Tutorial\r\n', '<p>HTML stands for Hyper Text Markup Language, which is the most widely used language on Web to develop web pages. HTML was created by Berners-Lee in late 1991 but "HTML 2.0" was the first standard HTML specification which was published in 1995. HTML 4.01 was a major version of HTML and it was published in late 1999. Though HTML 4.01 version is widely used but currently we are having HTML-5 version which is an extension to HTML 4.01, and this version was published in 2012.</p>\r\n<h1>Audience</h1>\r\n<p>This tutorial is designed for the aspiring Web Designers and Developers with a need to understand the HTML in enough detail along with its simple overview, and practical examples. This tutorial will give you enough ingredients to start with HTML from where you can take yourself at higher level of expertise.</p>\r\n<h1>Prerequisites</h1>\r\n<p>Before proceeding with this tutorial you should have a basic working knowledge with Windows or Linux operating system, additionally you must be familiar with &minus;</p>\r\n<ul class="list">\r\n<li>Experience with any text editor like notepad, notepad&plus;&plus;, or Edit plus etc.</li>\r\n<li>How to create directories and files on your computer.</li>\r\n<li>How to navigate through different directories.</li>\r\n<li>How to type content in a file and save them on a computer.</li>\r\n<li>Understanding about images in different formats like JPEG, PNG format.</li>\r\n</ul>\r\n<hr />'),
(5, 1, 2, 'HTML - Overview\r\n', '<hr />\n<p>HTML stands for <b><u>H</u></b>yper<b><u>t</u></b>ext <b><u>M</u></b>arkup <b><u>L</u></b>anguage, and it is the most widely used language to write Web Pages.</p>\n<ul class="list">\n<li><p><b>Hypertext</b> refers to the way in which Web pages (HTML documents) are linked together. Thus, the link available on a webpage is called Hypertext.</p></li>\n<li><p>As its name suggests, HTML is a <b>Markup Language</b> which means you use HTML to simply "mark-up" a text document with tags that tell a Web browser how to structure it to display.</p></li>\n</ul>\n<p>Originally, HTML was developed with the intent of defining the structure of documents like headings, paragraphs, lists, and so forth to facilitate the sharing of scientific information between researchers.</p>\n<p>Now, HTML is being widely used to format web pages with the help of different tags available in HTML language.</p>\n<h2>Basic HTML Document</h2>\n<p>In its simplest form, following is an example of an HTML document &minus;</p>\n<a href="http://tpcg.io/tryL9g" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>\n<pre class="prettyprint notranslate">\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\n   &lt;head&gt;\n      &lt;title&gt;This is document title&lt;/title&gt;\n   &lt;/head&gt;\n	\n   &lt;body&gt;\n      &lt;h1&gt;This is a heading&lt;/h1&gt;\n      &lt;p&gt;Document content goes here.....&lt;/p&gt;\n   &lt;/body&gt;\n	\n&lt;/html&gt;\n</pre>\n\n<h2>HTML Tags</h2>\n<p>As told earlier, HTML is a markup language and makes use of various tags to format the content. These tags are enclosed within angle braces <b>&lt;Tag Name&gt;</b>. Except few tags, most of the tags have their corresponding closing tags. For example, <b>&lt;html&gt;</b> has its closing tag <b>&lt;/html&gt;</b> and <b>&lt;body&gt;</b> tag has its closing tag <b>&lt;/body&gt;</b> tag etc.</p>\n<p>Above example of HTML document uses the following tags &minus;</p>\n<table class="table table-bordered">\n<tr>\n<th>Sr.No</th>\n<th style="text-align:center;">Tag &amp; Description</th>\n</tr>\n<tr>\n<td class="ts">1</td>\n<td>\n<b>&lt;!DOCTYPE...&gt;</b>\n<p>This tag defines the document type and HTML version.</p>\n</td>\n</tr>\n<tr>\n<td class="ts">2</td>\n<td>\n<b>&lt;html&gt;</b>\n<p>This tag encloses the complete HTML document and mainly comprises of document header which is represented by &lt;head&gt;...&lt;/head&gt; and document body which is represented by &lt;body&gt;...&lt;/body&gt; tags.</p>\n</td>\n</tr>\n<tr>\n<td class="ts">3</td>\n<td>\n<b>&lt;head&gt;</b>\n<p>This tag represents the document''s header which can keep other HTML tags like &lt;title&gt;, &lt;link&gt; etc.</p>\n</td>\n</tr>\n<tr>\n<td class="ts">4</td>\n<td>\n<b>&lt;title&gt;</b>\n<p>The &lt;title&gt; tag is used inside the &lt;head&gt; tag to mention the document title.</p>\n</td>\n</tr>\n<tr>\n<td class="ts">5</td>\n<td>\n<b>&lt;body&gt;</b>\n<p>This tag represents the document''s body which keeps other HTML tags like &lt;h1&gt;, &lt;div&gt;, &lt;p&gt; etc.</p>\n</td>\n</tr>\n<tr>\n<td class="ts">6</td>\n<td>\n<b>&lt;h1&gt;</b>\n<p>This tag represents the heading.</p>\n</td>\n</tr>\n<tr>\n<td class="ts">7</td>\n<td>\n<b>&lt;p&gt;</b>\n<p>This tag represents a paragraph.</p>\n</td>\n</tr>\n</table>\n<p>To learn HTML, you will need to study various tags and understand how they behave, while formatting a textual document. Learning HTML is simple as users have to learn the usage of different tags in order to format the text or images to make a beautiful webpage.</p>\n<p>World Wide Web Consortium (W3C) recommends to use lowercase tags starting from HTML 4.</p>\n<h2>HTML Document Structure</h2>\n<p>A typical HTML document will have the following structure &minus;</p>\n<pre class="prettyprint notranslate">\n&lt;html&gt;\n   \n   &lt;head&gt;\n      Document header related tags\n   &lt;/head&gt;\n   \n   &lt;body&gt;\n      Document body related tags\n   &lt;/body&gt;\n   \n&lt;/html&gt;\n</pre>\n<p>We will study all the header and body tags in subsequent chapters, but for now let''s see what is document declaration tag.</p>\n<h2>The &lt;!DOCTYPE&gt; Declaration</h2>\n<p>The &lt;!DOCTYPE&gt; declaration tag is used by the web browser to understand the version of the HTML used in the document. Current version of HTML is 5 and it makes use of the following declaration &minus;</p>\n<pre class="prettyprint notranslate">\n&lt;!DOCTYPE html&gt;\n</pre>\n<p>There are many other declaration types which can be used in HTML document depending on what version of HTML is being used. We will see more details on this while discussing &lt;!DOCTYPE...&gt; tag along with other HTML tags.</p>\n<hr />'),
(6, 1, 3, 'HTML - Basic Tags', '<hr />\n<h2>Heading Tags</h2>\n<p>Any document starts with a heading. You can use different sizes for your headings. HTML also has six levels of headings, which use the elements <b>&lt;h1&gt;, &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt;, &lt;h5&gt;,</b> and <b>&lt;h6&gt;</b>. While displaying any heading, browser adds one line before and one line after that heading.</p>\n<h3>Example</h3>\n<a href="http://tpcg.io/Oevfe8" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>\n<pre class="prettyprint notranslate">\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\n   &lt;head&gt;\n      &lt;title&gt;Heading Example&lt;/title&gt;\n   &lt;/head&gt;\n	\n   &lt;body&gt;\n      &lt;h1&gt;This is heading 1&lt;/h1&gt;\n      &lt;h2&gt;This is heading 2&lt;/h2&gt;\n      &lt;h3&gt;This is heading 3&lt;/h3&gt;\n      &lt;h4&gt;This is heading 4&lt;/h4&gt;\n      &lt;h5&gt;This is heading 5&lt;/h5&gt;\n      &lt;h6&gt;This is heading 6&lt;/h6&gt;\n   &lt;/body&gt;\n	\n&lt;/html&gt;\n</pre>\n<h2>Paragraph Tag</h2>\n<p>The <b>&lt;p&gt;</b> tag offers a way to structure your text into different paragraphs. Each paragraph of text should go in between an opening &lt;p&gt; and a closing &lt;/p&gt; tag as shown below in the example &minus;</p>\n<h3>Example</h3>\n<a href="http://tpcg.io/Uo5jZe" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>\n<pre class="prettyprint notranslate">\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\n   &lt;head&gt;\n      &lt;title&gt;Paragraph Example&lt;/title&gt;\n   &lt;/head&gt;\n	\n   &lt;body&gt;\n      &lt;p&gt;Here is a first paragraph of text.&lt;/p&gt;\n      &lt;p&gt;Here is a second paragraph of text.&lt;/p&gt;\n      &lt;p&gt;Here is a third paragraph of text.&lt;/p&gt;\n   &lt;/body&gt;\n	\n&lt;/html&gt;\n</pre>\n\n<h2>Line Break Tag</h2>\n<p>Whenever you use the <b>&lt;br /&gt;</b> element, anything following it starts from the next line. This tag is an example of an <b>empty</b> element, where you do not need opening and closing tags, as there is nothing to go in between them.</p>\n<p>The &lt;br /&gt; tag has a space between the characters <b>br</b> and the forward slash. If you omit this space, older browsers will have trouble rendering the line break, while if you miss the forward slash character and just use &lt;br&gt; it is not valid in XHTML.</p>\n<h3>Example</h3>\n<a href="http://tpcg.io/aWg5PG" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>\n<pre class="prettyprint notranslate">\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\n   &lt;head&gt;\n      &lt;title&gt;Line Break  Example&lt;/title&gt;\n   &lt;/head&gt;\n	\n   &lt;body&gt;\n      &lt;p&gt;Hello&lt;br /&gt;\n         You delivered your assignment ontime.&lt;br /&gt;\n         Thanks&lt;br /&gt;\n         Mahnaz&lt;/p&gt;\n   &lt;/body&gt;\n	\n&lt;/html&gt;\n</pre>\n<p>This will produce the following result &minus;</p>\n<h2>Centering Content</h2>\n<p>You can use <b>&lt;center&gt;</b> tag to put any content in the center of the page or any table cell.</p>\n<h3>Example</h3>\n<a href="http://tpcg.io/mVrRPS" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>\n<pre class="prettyprint notranslate">\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\n   &lt;head&gt;\n      &lt;title&gt;Centring Content Example&lt;/title&gt;\n   &lt;/head&gt;\n	\n   &lt;body&gt;\n      &lt;p&gt;This text is not in the center.&lt;/p&gt;\n      \n      &lt;center&gt;\n         &lt;p&gt;This text is in the center.&lt;/p&gt;\n      &lt;/center&gt;\n   &lt;/body&gt;\n	\n&lt;/html&gt;\n</pre>\n<p>This will produce following result &minus;</p>\n<h2>Horizontal Lines</h2>\n<p>Horizontal lines are used to visually break-up sections of a document. The <b>&lt;hr&gt;</b> tag creates a line from the current position in the document to the right margin and breaks the line accordingly.</p>\n<p>For example, you may want to give a line between two paragraphs as in the given example below &minus;</p>\n<h3>Example</h3>\n<a href="http://tpcg.io/4iAnXc" target="_blank" rel="nofollow"  class="demo"><i class="fa-external-link"></i> Live Demo</a>\n<pre class="prettyprint notranslate">\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\n   &lt;head&gt;\n      &lt;title&gt;Horizontal Line Example&lt;/title&gt;\n   &lt;/head&gt;\n	\n   &lt;body&gt;\n      &lt;p&gt;This is paragraph one and should be on top&lt;/p&gt;\n      &lt;hr /&gt;\n      &lt;p&gt;This is paragraph two and should be at bottom&lt;/p&gt;\n   &lt;/body&gt;\n	\n&lt;/html&gt;\n</pre>\n<p>Again <b>&lt;hr /&gt;</b> tag is an example of the <b>empty</b> element, where you do not need opening and closing tags, as there is nothing to go in between them.</p>\n<p>The <b>&lt;hr /&gt;</b> element has a space between the characters <b>hr</b> and the forward slash. If you omit this space, older browsers will have trouble rendering the horizontal line, while if you miss the forward slash character and just use <b>&lt;hr&gt;</b> it is not valid in XHTML</p>\n<h2>Preserve Formatting</h2>\n<p>Sometimes, you want your text to follow the exact format of how it is written in the HTML document. In these cases, you can use the preformatted tag <b>&lt;pre&gt;</b>.</p>\n<p>Any text between the opening <b>&lt;pre&gt;</b> tag and the closing <b>&lt;/pre&gt;</b> tag will preserve the formatting of the source document.</p>\n<h3>Example</h3>\n<a href="http://tpcg.io/e3k3sG" target="_blank" rel="nofollow"  class="demo"><i class="fa-external-link"></i> Live Demo</a>\n<pre class="prettyprint notranslate">\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\n   &lt;head&gt;\n      &lt;title&gt;Preserve Formatting Example&lt;/title&gt;\n   &lt;/head&gt;\n	\n   &lt;body&gt;\n      &lt;pre&gt;\n         function testFunction( strText ){\n            alert (strText)\n         }\n      &lt;/pre&gt;\n   &lt;/body&gt;\n	\n&lt;/html&gt;\n</pre>\n<p>Try using the same code without keeping it inside <b>&lt;pre&gt;...&lt;/pre&gt;</b> tags</p>\n<h2>Nonbreaking Spaces</h2>\n<p>Suppose you want to use the phrase "12 Angry Men." Here, you would not want a browser to split the "12, Angry" and "Men" across two lines &minus;</p>\n<pre class="result notranslate">\nAn example of this technique appears in the movie "12 Angry Men."\n</pre>\n<p>In cases, where you do not want the client browser to break text, you should use a nonbreaking space entity <b>&amp;nbsp;</b> instead of a normal space. For example, when coding the "12 Angry Men" in a paragraph, you should use something similar to the following code &minus;</p>\n<h3>Example</h3>\n<a href="http://tpcg.io/OhhfWR" target="_blank" rel="nofollow"  class="demo"><i class="fa-external-link"></i> Live Demo</a>\n<pre class="prettyprint notranslate">\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\n   &lt;head&gt;\n      &lt;title&gt;Nonbreaking Spaces Example&lt;/title&gt;\n   &lt;/head&gt;\n	\n   &lt;body&gt;\n      &lt;p&gt;An example of this technique appears in the movie "12&amp;nbsp;Angry&amp;nbsp;Men."&lt;/p&gt;\n   &lt;/body&gt;\n	\n&lt;/html&gt;\n</pre>\n'),
(7, 3, 1, 'PHP Tutorial', '<p>The PHP Hypertext Preprocessor (PHP) is a programming language that allows web developers to create dynamic content that interacts with databases. PHP is basically used for developing web based software applications. This tutorial helps you to build your base with PHP.</p>\r\n<h1>Audience</h1>\r\n<p>This tutorial is designed for PHP programmers who are completely unaware of PHP concepts but they have basic understanding on computer programming.</p>\r\n<h1>Prerequisites</h1>\r\n<p>Before proceeding with this tutorial you should have at least basic understanding of computer programming, Internet, Database, and MySQL etc is very helpful.</p>'),
(8, 3, 2, 'PHP - Introduction', '<hr />\r\n<p>PHP started out as a small open source project that evolved as more and more people found out how useful it was. Rasmus Lerdorf unleashed the first version of PHP way back in 1994.</p>\r\n<ul class="list">\r\n<li><p>PHP is a recursive acronym for "PHP: Hypertext Preprocessor".</p></li>\r\n<li><p>PHP is a server side scripting language that is embedded in HTML. It is used to manage dynamic content, databases, session tracking, even build entire e-commerce sites.</p></li>\r\n<li><p>It is integrated with a number of popular databases, including MySQL, PostgreSQL, Oracle, Sybase, Informix, and Microsoft SQL Server.</p></li>\r\n<li><p>PHP is pleasingly zippy in its execution, especially when compiled as an Apache module on the Unix side. The MySQL server, once started, executes even very complex queries with huge result sets in record-setting time.</p></li>\r\n<li><p>PHP supports a large number of major protocols such as POP3, IMAP, and LDAP. PHP4 added support for Java and distributed object architectures (COM and CORBA), making n-tier development a possibility for the first time.</p></li>\r\n<li><p>PHP is forgiving: PHP language tries to be as forgiving as possible.</p></li>\r\n<li><p>PHP Syntax is C-Like.</p></li>\r\n</ul>\r\n<h2>Common uses of PHP</h2>\r\n<ul class="list">\r\n<li><p>PHP performs system functions, i.e. from files on a system it can create, open, read, write, and close them.</p></li>\r\n<li><p>PHP can handle forms, i.e. gather data from files, save data to a file, through email you can send data, return data to the user.</p></li>\r\n<li><p>You add, delete, modify elements within your database through PHP.</p></li>\r\n<li><p>Access cookies variables and set cookies.</p></li>\r\n<li><p>Using PHP, you can restrict users to access some pages of your website.</p></li>\r\n<li><p>It can encrypt data.</p></li>\r\n</ul>\r\n<h2>Characteristics of PHP</h2>\r\n<p>Five important characteristics make PHP''s practical nature possible &minus;</p>\r\n<ul class="list">\r\n<li>Simplicity</li>\r\n<li>Efficiency</li>\r\n<li>Security</li>\r\n<li>Flexibility</li>\r\n<li>Familiarity</li>\r\n</ul>\r\n<h2>"Hello World" Script in PHP</h2>\r\n<p>To get a feel for PHP, first start with simple PHP scripts. Since "Hello, World!" is an essential example, first we will create a friendly little "Hello, World!" script.</p>\r\n<p>As mentioned earlier, PHP is embedded in HTML.  That means that in amongst your normal HTML (or XHTML if you''re cutting-edge) you''ll have PHP statements like this &minus;</p>\r\n<a href="http://tpcg.io/cJf0To" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>\r\n<pre class="prettyprint notranslate">\r\n&lt;html&gt;\r\n   \r\n   &lt;head&gt;\r\n      &lt;title&gt;Hello World&lt;/title&gt;\r\n   &lt;/head&gt;\r\n   \r\n   &lt;body&gt;\r\n      &lt;?php echo "Hello, World!";?&gt;\r\n   &lt;/body&gt;\r\n\r\n&lt;/html&gt;\r\n</pre>\r\n<p>It will produce following result &minus;</p>\r\n<pre class="result notranslate">\r\nHello, World!\r\n</pre>\r\n<p>If you examine the HTML output of the above example, you''ll notice that the PHP code is not present in the file sent from the server to your Web browser. All of the PHP present in the Web page is processed and stripped from the page; the only thing returned to the client from the Web server is pure HTML output.</p>\r\n<p>All PHP code must be included inside one of the three special markup tags ATE are recognised by the PHP Parser.</p>\r\n<pre class="prettyprint notranslate">\r\n&lt;?php PHP code goes here ?&gt;\r\n\r\n&lt;?    PHP code goes here ?&gt;\r\n\r\n&lt;script language = "php"&gt; PHP code goes here &lt;/script&gt;\r\n</pre>\r\n<p>A most common tag is the &lt;?php...?&gt; and we will also use the same tag in our tutorial.</p>\r\n<p>From the next chapter we will start with  PHP Environment Setup on your machine and then we will dig out almost all concepts related to PHP to make you comfortable with the PHP language.</p>\r\n<hr />'),
(9, 3, 3, 'PHP - Variable Types', '<hr />\r\n<p>The main way to store information in the middle of a PHP program is by using a variable.</p>\r\n<p>Here are the most important things to know about variables in PHP.</p>\r\n<ul class="list">\r\n<li><p>All variables in PHP are denoted with a leading dollar sign ($).</p></li>\r\n<li><p>The value of a variable is the value of its most recent assignment.</p></li>\r\n<li><p>Variables are assigned with the = operator, with the variable on the left-hand side and the expression to be evaluated on the right.</p></li>\r\n<li><p>Variables can, but do not need, to be declared before assignment.</p></li>\r\n<li><p>Variables in PHP do not have intrinsic types - a variable does not know in advance whether it will be used to store a number or a string of characters.</p></li>\r\n<li><p>Variables used before they are assigned have default values.</p></li>\r\n<li><p>PHP does a good job of automatically converting types from one to another when necessary.</p></li>\r\n<li><p>PHP variables are Perl-like.</p></li>\r\n</ul>\r\n<p>PHP has a total of eight data types which we use to construct our variables &minus;</p>\r\n<ul class="list">\r\n<li><p><b>Integers</b> &minus; are whole numbers, without a decimal point, like 4195.</p></li>\r\n<li><p><b>Doubles</b> &minus; are floating-point numbers, like 3.14159 or 49.1.</p></li>\r\n<li><p><b>Booleans</b> &minus; have only two possible values either true or false.</p></li>\r\n<li><p><b>NULL</b> &minus; is a special type that only has one value: NULL.</p></li>\r\n<li><p><b>Strings</b> &minus; are sequences of characters, like ''PHP supports string operations.''</p></li>\r\n<li><p><b>Arrays</b> &minus; are named and indexed collections of other values.</p></li>\r\n<li><p><b>Objects</b> &minus; are instances of programmer-defined classes, which can package up both other kinds of values and functions that are specific to the class.</p></li>\r\n<li><p><b>Resources</b> &minus; are special variables that hold references to resources external to PHP (such as database connections).</p></li>\r\n</ul>\r\n<p>The first five are <i>simple types</i>, and the next two (arrays and objects) are compound - the compound types can package up other arbitrary values of arbitrary type, whereas the simple types cannot.</p>\r\n<p>We will explain only simple data type in this chapters. Array and Objects will be explained separately.</p>\r\n<h2>Integers</h2>\r\n<p>They are whole numbers, without a decimal point, like 4195. They are the simplest type .they correspond to simple whole numbers, both positive and negative. Integers can be assigned to variables, or they can be used in expressions, like so &minus;</p>\r\n<pre class="result notranslate">\r\n$int_var = 12345;\r\n$another_int = -12345 + 12345;\r\n</pre>\r\n<p>Integer can be in decimal (base 10), octal (base 8), and hexadecimal (base 16) format. Decimal format is the default, octal integers are specified with a leading 0, and hexadecimals have a leading 0x.</p>\r\n<p>For most common platforms, the largest integer is (2**31 . 1) (or 2,147,483,647), and the smallest (most negative) integer is . (2**31 . 1) (or .2,147,483,647).</p>\r\n<h2>Doubles</h2>\r\n<p>They like 3.14159 or 49.1. By default, doubles print with the minimum number of decimal places needed. For example, the code &minus;</p>\r\n<a href="http://tpcg.io/X97Lmh" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>\r\n<pre class="prettyprint notranslate">\r\n&lt;?php\r\n   $many = 2.2888800;\r\n   $many_2 = 2.2111200;\r\n   $few = $many + $many_2;\r\n   \r\n   print("$many + $many_2 = $few &lt;br&gt;");\r\n?&gt;\r\n</pre>\r\n<p>It produces the following browser output &minus;</p>\r\n<pre class="result notranslate">\r\n2.28888 + 2.21112 = 4.5\r\n</pre>\r\n<h2>Boolean</h2>\r\n<p>They have only two possible values either true or false. PHP provides a couple of constants especially for use as Booleans: TRUE and FALSE, which can be used like so &minus;</p>\r\n<pre class="prettyprint notranslate">\r\nif (TRUE)\r\n   print("This will always print&lt;br&gt;");\r\n\r\nelse\r\n   print("This will never print&lt;br&gt;");\r\n</pre>\r\n<h3>Interpreting other types as Booleans</h3>\r\n<p>Here are the rules for determine the "truth" of any value not already of the Boolean type &minus;</p>\r\n<ul class="list">\r\n<li><p>If the value is a number, it is false if exactly equal to zero and true otherwise.</p></li>\r\n<li><p>If the value is a string, it is false if the string is empty (has zero characters) or is the string "0", and is true otherwise.</p></li>\r\n<li><p>Values of type NULL are always false.</p></li>\r\n<li><p>If the value is an array, it is false if it contains no other values, and it is true otherwise. For an object, containing a value means having a member variable that has been assigned a value.</p></li>\r\n<li><p>Valid resources are true (although some functions that return resources when they are successful will return FALSE when unsuccessful).</p></li>\r\n<li><p>Don''t use double as Booleans.</p></li>\r\n</ul>\r\n<p>Each of the following variables has the truth value embedded in its name when it is used in a Boolean context.</p>\r\n<pre class="prettyprint notranslate">\r\n$true_num = 3 + 0.14159;\r\n$true_str = "Tried and true"\r\n$true_array[49] = "An array element";\r\n$false_array = array();\r\n$false_null = NULL;\r\n$false_num = 999 - 999;\r\n$false_str = "";\r\n</pre>\r\n<h2>NULL</h2>\r\n<p>NULL is a special type that only has one value: NULL. To give a variable the NULL value, simply assign it like this &minus;</p>\r\n<pre class="prettyprint notranslate">\r\n$my_var = NULL;\r\n</pre>\r\n<p>The special constant NULL is capitalized by convention, but actually it is case insensitive; you could just as well have typed &minus;</p>\r\n<pre class="prettyprint notranslate">\r\n$my_var = null;\r\n</pre>\r\n<p>A variable that has been assigned NULL has the following properties &minus;</p>\r\n<ul class="list">\r\n<li><p>It evaluates to FALSE in a Boolean context.</p></li>\r\n<li><p>It returns FALSE when tested with IsSet() function.</p></li>\r\n</ul>\r\n<h2>Strings</h2>\r\n<p>They are sequences of characters, like "PHP supports string operations". Following are valid examples of string</p>\r\n<pre class="prettyprint notranslate">\r\n$string_1 = "This is a string in double quotes";\r\n$string_2 = ''This is a somewhat longer, singly quoted string'';\r\n$string_39 = "This string has thirty-nine characters";\r\n$string_0 = ""; // a string with zero characters\r\n</pre>\r\n<p>Singly quoted strings are treated almost literally, whereas doubly quoted strings replace variables with their values as well as specially interpreting certain character sequences.</p>\r\n<a href="http://tpcg.io/A5EYas" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>\r\n<pre class="prettyprint notranslate">\r\n&lt;?php\r\n   $variable = "name";\r\n   $literally = ''My $variable will not print!'';\r\n   \r\n   print($literally);\r\n   print "&lt;br&gt;";\r\n   \r\n   $literally = "My $variable will print!";\r\n   print($literally);\r\n?&gt;\r\n</pre>\r\n<p>This will produce following result &minus;</p>\r\n<pre class="result notranslate">\r\nMy $variable will not print!\r\nMy name will print\r\n</pre>\r\n<p>There are no artificial limits on string length - within the bounds of available memory, you ought to be able to make arbitrarily long strings.</p>\r\n<p>Strings that are delimited by double quotes (as in "this") are preprocessed in both the following two ways by PHP &minus;</p>\r\n<ul class="list">\r\n<li><p>Certain character sequences beginning with backslash (\\) are replaced with special characters</p></li>\r\n<li><p>Variable names (starting with $) are replaced with string representations of their values.</p></li>\r\n</ul>\r\n<p>The escape-sequence replacements are &minus;</p>\r\n<ul class="list">\r\n<li>\\n is replaced by the newline character</li>\r\n<li>\\r is replaced by the carriage-return character</li>\r\n<li>\\t is replaced by the tab character</li>\r\n<li>\\$ is replaced by the dollar sign itself ($)</li>\r\n<li>\\" is replaced by a single double-quote (")</li>\r\n<li>\\\\ is replaced by a single backslash (\\)</li>\r\n</ul>\r\n<h3>Here Document</h3>\r\n<p>You can assign multiple lines to a single string variable using here document &minus;</p>\r\n<a href="http://tpcg.io/Uq3o1a" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>\r\n<pre class="prettyprint notranslate">\r\n&lt;?php\r\n   $channel =&lt;&lt;&lt;_XML_\r\n   \r\n   &lt;channel&gt;\r\n      &lt;title&gt;What''s For Dinner&lt;/title&gt;\r\n      &lt;link&gt;http://menu.example.com/ &lt;/link&gt;\r\n      &lt;description&gt;Choose what to eat tonight.&lt;/description&gt;\r\n   &lt;/channel&gt;\r\n   _XML_;\r\n   \r\n   echo &lt;&lt;&lt;END\r\n   This uses the "here document" syntax to output multiple lines with variable \r\n   interpolation. Note that the here document terminator must appear on a line with \r\n   just a semicolon. no extra whitespace!\r\n   <br />\r\n   END;\r\n   \r\n   print $channel;\r\n?&gt;\r\n</pre>\r\n<p>This will produce following result &minus;</p>\r\n<pre class="result notranslate">\r\nThis uses the "here document" syntax to output\r\nmultiple lines with variable interpolation. Note\r\nthat the here document terminator must appear on a\r\nline with just a semicolon. no extra whitespace!\r\n\r\n&lt;channel&gt;\r\n&lt;title&gt;What''s For Dinner&lt;title&gt;\r\n&lt;link&gt;http://menu.example.com/&lt;link&gt;\r\n&lt;description&gt;Choose what to eat tonight.&lt;/description&gt;\r\n</pre>\r\n<h2>Variable Scope</h2>\r\n<p>Scope can be defined as the range of availability a variable has to the program in which it is declared. PHP variables can be one of four scope types &minus;</p>\r\n<ul class="list">\r\n<li><p><a href="/php/php_local_variables.htm">Local variables</a></p></li>\r\n<li><p><a href="/php/php_function_parameters.htm">Function parameters</a></p></li>\r\n<li><p><a href="/php/php_global_variables.htm">Global variables</a></p></li>\r\n<li><p><a href="/php/php_static_variables.htm">Static variables</a></p></li>\r\n</ul>\r\n<h2>Variable Naming</h2>\r\n<p>Rules for naming a variable is &minus;</p>\r\n<ul class="list">\r\n<li><p>Variable names must begin with a letter or underscore character.</p></li>\r\n<li><p>A variable name can consist of numbers, letters, underscores but you cannot use characters like + , - , % , ( , ) . &amp; , etc</p></li>\r\n</ul>\r\n<p>There is no size limit for variables.</p>\r\n<hr />'),
(10, 4, 1, 'Python - Tutorial', '<p>Python is a general-purpose interpreted, interactive, object-oriented, and high-level programming language. It was created by Guido van Rossum during 1985- 1990. Like Perl, Python source code is also available under the GNU General Public License (GPL). This tutorial gives enough understanding on Python programming language.</p>\r\n<h1>Audience</h1>\r\n<p>This tutorial is designed for software programmers who need to learn Python programming language from scratch.</p>\r\n<h1>Prerequisites</h1>\r\n<p>You should have a basic understanding of Computer Programming terminologies. A basic understanding of any of the programming languages is a plus.</p>\r\n<hr />'),
(11, 4, 2, 'Python - Variable Types\r\n', '<hr />\r\n<p>Variables are nothing but reserved memory locations to store values. This means that when you create a variable you reserve some space in memory.</p>\r\n<p>Based on the data type of a variable, the interpreter allocates memory and decides what can be stored in the reserved memory. Therefore, by assigning different data types to variables, you can store integers, decimals or characters in these variables.</p>\r\n<h2>Assigning Values to Variables</h2>\r\n<p>Python variables do not need explicit declaration to reserve memory space. The declaration happens automatically when you assign a value to a variable. The equal sign (=) is used to assign values to variables.</p>\r\n<p>The operand to the left of the = operator is the name of the variable and the operand to the right of the = operator is the value stored in the variable. For example &minus;</p>\r\n<a href="http://tpcg.io/Eh9FoM" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>\r\n<pre class="prettyprint notranslate">\r\n#!/usr/bin/python\r\n\r\ncounter = 100          # An integer assignment\r\nmiles   = 1000.0       # A floating point\r\nname    = "John"       # A string\r\n\r\nprint counter\r\nprint miles\r\nprint name\r\n</pre>\r\n<p>Here, 100, 1000.0 and  "John" are the values assigned to <i>counter</i>, <i>miles</i>, and <i>name</i> variables, respectively. This produces the following result &minus;</p>\r\n<pre class="result notranslate">\r\n100\r\n1000.0\r\nJohn\r\n</pre>\r\n<h2>Multiple Assignment</h2>\r\n<p>Python allows you to assign a single value to several variables simultaneously. For example &minus;</p>\r\n<pre class="result notranslate">\r\na = b = c = 1\r\n</pre>\r\n<p>Here, an integer object is created with the value 1, and all three variables are assigned to the same memory location. You can also assign multiple objects to multiple variables. For example &minus;</p>\r\n<pre class="result notranslate">\r\na,b,c = 1,2,"john"\r\n</pre>\r\n<p>Here, two integer objects with values 1 and 2 are assigned to variables a and b respectively, and one string object with the value "john" is assigned to the variable c.</p>\r\n<h2>Standard Data Types</h2>\r\n<p>The data stored in memory can be of many types. For example, a person''s age is stored as a numeric value and his or her address is stored as alphanumeric characters. Python has various standard data types that are used to define the operations possible on them and the storage method for each of them.</p>\r\n<p>Python has five standard data types &minus;</p>\r\n<ul class="list">\r\n<li>Numbers</li>\r\n<li>String</li>\r\n<li>List</li>\r\n<li>Tuple</li>\r\n<li>Dictionary</li>\r\n</ul>\r\n<h2>Python Numbers</h2>\r\n<p>Number data types store numeric values. Number objects are created when you assign a value to them. For example &minus;</p>\r\n<pre class="result notranslate">\r\nvar1 = 1\r\nvar2 = 10\r\n</pre>\r\n<p>You can also delete the reference to a number object by using the del statement. The syntax of the del statement is &minus;</p>\r\n<pre class="result notranslate">\r\ndel var1[,var2[,var3[....,varN]]]]\r\n</pre>\r\n<p>You can delete a single object or multiple objects by using the del statement. For example &minus;</p>\r\n<pre class="result notranslate">\r\ndel var\r\ndel var_a, var_b\r\n</pre>\r\n<p>Python supports four different numerical types &minus;</p>\r\n<ul class="list">\r\n<li>int (signed integers)</li>\r\n<li>long (long integers, they can also be represented in octal and hexadecimal)</li>\r\n<li>float (floating point real values)</li>\r\n<li>complex (complex numbers)</li>\r\n</ul>\r\n<h3>Examples</h3>\r\n<p>Here are some examples of numbers &minus;</p>\r\n<table class="table table-bordered" style="text-align:center;">\r\n<tr>\r\n<th style="text-align:center;">int</th>\r\n<th style="text-align:center;">long</th>\r\n<th style="text-align:center;">float</th>\r\n<th style="text-align:center;">complex</th>\r\n</tr>\r\n<tr>\r\n<td>10</td>\r\n<td>51924361L</td>\r\n<td>0.0</td>\r\n<td>3.14j</td>\r\n</tr>\r\n<tr>\r\n<td>100</td>\r\n<td>-0x19323L</td>\r\n<td>15.20</td>\r\n<td>45.j</td>\r\n</tr>\r\n<tr>\r\n<td>-786</td>\r\n<td>0122L</td>\r\n<td>-21.9</td>\r\n<td>9.322e-36j</td>\r\n</tr>\r\n<tr>\r\n<td>080</td>\r\n<td>0xDEFABCECBDAECBFBAEl</td>\r\n<td>32.3+e18</td>\r\n<td>.876j</td>\r\n</tr>\r\n<tr>\r\n<td>-0490</td>\r\n<td>535633629843L</td>\r\n<td>-90.</td>\r\n<td>-.6545+0J</td>\r\n</tr>\r\n<tr>\r\n<td>-0x260</td>\r\n<td>-052318172735L</td>\r\n<td>-32.54e100</td>\r\n<td>3e+26J</td>\r\n</tr>\r\n<tr>\r\n<td>0x69</td>\r\n<td>-4721885298529L</td>\r\n<td>70.2-E12</td>\r\n<td>4.53e-7j</td>\r\n</tr>\r\n</table>\r\n<ul class="list">\r\n<li><p>Python allows you to use a lowercase l with long, but it is recommended that you use only an uppercase L to avoid confusion with the number 1. Python displays long integers with an uppercase L.</p></li>\r\n<li><p>A complex number consists of an ordered pair of real floating-point numbers denoted by x + yj, where x and y are the real numbers and j is the imaginary unit.</p></li>\r\n</ul>\r\n<h2>Python Strings</h2>\r\n<p>Strings in Python are identified as a contiguous set of characters represented in the quotation marks. Python allows for either pairs of single or double quotes. Subsets of strings can be taken using the slice operator ([ ] and [:] ) with indexes starting at 0 in the beginning of the string and working their way from -1 at the end.</p>\r\n<p>The plus (+) sign is the string concatenation operator and the asterisk (*) is the repetition operator. For example &minus;</p>\r\n<a href="http://tpcg.io/PsSj6c" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>\r\n<pre class="prettyprint notranslate">\r\n#!/usr/bin/python\r\n\r\nstr = ''Hello World!''\r\n\r\nprint str          # Prints complete string\r\nprint str[0]       # Prints first character of the string\r\nprint str[2:5]     # Prints characters starting from 3rd to 5th\r\nprint str[2:]      # Prints string starting from 3rd character\r\nprint str * 2      # Prints string two times\r\nprint str + "TEST" # Prints concatenated string\r\n</pre>\r\n<p>This will produce the following result &minus;</p>\r\n<pre class="result notranslate">\r\nHello World!\r\nH\r\nllo\r\nllo World!\r\nHello World!Hello World!\r\nHello World!TEST\r\n</pre>\r\n<h2>Python Lists</h2>\r\n<p>Lists are the most versatile of Python''s compound data types. A list contains items separated by commas and enclosed within square brackets ([]). To some extent, lists are similar to arrays in C. One difference between them is that all the items belonging to a list can be of different data type.</p>\r\n<p>The values stored in a list can be accessed using the slice operator ([ ] and [:]) with indexes starting at 0 in the beginning of the list and working their way to end -1. The plus (+) sign is the list concatenation operator, and the asterisk (*) is the repetition operator. For example &minus;</p>\r\n<a href="http://http://tpcg.io/AjPKpn" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>\r\n<pre class="prettyprint notranslate">\r\n#!/usr/bin/python\r\n\r\nlist = [ ''abcd'', 786 , 2.23, ''john'', 70.2 ]\r\ntinylist = [123, ''john'']\r\n\r\nprint list          # Prints complete list\r\nprint list[0]       # Prints first element of the list\r\nprint list[1:3]     # Prints elements starting from 2nd till 3rd \r\nprint list[2:]      # Prints elements starting from 3rd element\r\nprint tinylist * 2  # Prints list two times\r\nprint list + tinylist # Prints concatenated lists\r\n</pre>\r\n<p>This produce the following result &minus;</p>\r\n<pre class="result notranslate">\r\n[''abcd'', 786, 2.23, ''john'', 70.2]\r\nabcd\r\n[786, 2.23]\r\n[2.23, ''john'', 70.2]\r\n[123, ''john'', 123, ''john'']\r\n[''abcd'', 786, 2.23, ''john'', 70.2, 123, ''john'']\r\n</pre>\r\n<h2>Python Tuples</h2>\r\n<p>A tuple is another sequence data type that is similar to the list. A tuple consists of a number of values separated by commas. Unlike lists, however, tuples are enclosed within parentheses.</p>\r\n<p>The main differences between lists and tuples are: Lists are enclosed in brackets ( [ ] ) and their elements and size can be changed, while tuples are enclosed in parentheses ( ( ) ) and cannot be updated. Tuples can be thought of as <b>read-only</b> lists. For example &minus;</p>\r\n<a href="http://tpcg.io/XYBk9k" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>\r\n<pre class="prettyprint notranslate">\r\n#!/usr/bin/python\r\n\r\ntuple = ( ''abcd'', 786 , 2.23, ''john'', 70.2  )\r\ntinytuple = (123, ''john'')\r\n\r\nprint tuple           # Prints complete list\r\nprint tuple[0]        # Prints first element of the list\r\nprint tuple[1:3]      # Prints elements starting from 2nd till 3rd \r\nprint tuple[2:]       # Prints elements starting from 3rd element\r\nprint tinytuple * 2   # Prints list two times\r\nprint tuple + tinytuple # Prints concatenated lists\r\n</pre>\r\n<p>This produce the following result &minus;</p>\r\n<pre class="result notranslate">\r\n(''abcd'', 786, 2.23, ''john'', 70.2)\r\nabcd\r\n(786, 2.23)\r\n(2.23, ''john'', 70.2)\r\n(123, ''john'', 123, ''john'')\r\n(''abcd'', 786, 2.23, ''john'', 70.2, 123, ''john'')\r\n</pre>\r\n<p>The following code is invalid with tuple, because we attempted to update a tuple, which is not allowed. Similar case is possible with lists &minus;</p>\r\n<pre class="prettyprint notranslate">\r\n#!/usr/bin/python\r\n\r\ntuple = ( ''abcd'', 786 , 2.23, ''john'', 70.2  )\r\nlist = [ ''abcd'', 786 , 2.23, ''john'', 70.2  ]\r\ntuple[2] = 1000    # Invalid syntax with tuple\r\nlist[2] = 1000     # Valid syntax with list\r\n</pre>\r\n<h2>Python Dictionary</h2>\r\n<p>Python''s dictionaries are kind of hash table type. They work like associative arrays or hashes found in Perl and consist of key-value pairs. A dictionary key can be almost any Python type, but are usually numbers or strings. Values, on the other hand, can be any arbitrary Python object.</p>\r\n<p>Dictionaries are enclosed by curly braces ({ }) and values can be assigned and accessed using square braces ([]). For example &minus;</p>\r\n<a href="http://tpcg.io/DlY1Gc" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>\r\n<pre class="prettyprint notranslate">\r\n#!/usr/bin/python\r\n\r\ndict = {}\r\ndict[''one''] = "This is one"\r\ndict[2]     = "This is two"\r\n\r\ntinydict = {''name'': ''john'',''code'':6734, ''dept'': ''sales''}\r\n\r\n\r\nprint dict[''one'']       # Prints value for ''one'' key\r\nprint dict[2]           # Prints value for 2 key\r\nprint tinydict          # Prints complete dictionary\r\nprint tinydict.keys()   # Prints all the keys\r\nprint tinydict.values() # Prints all the values\r\n</pre>\r\n<p>This produce the following result &minus;</p>\r\n<pre class="result notranslate">\r\nThis is one\r\nThis is two\r\n{''dept'': ''sales'', ''code'': 6734, ''name'': ''john''}\r\n[''dept'', ''code'', ''name'']\r\n[''sales'', 6734, ''john'']\r\n</pre>\r\n<p>Dictionaries have no concept of order among elements. It is incorrect to say that the elements are "out of order"; they are simply unordered.</p>\r\n<h2>Data Type Conversion</h2>\r\n<p>Sometimes, you may need to perform conversions between the built-in types. To convert between types, you simply use the type name as a function.</p>\r\n<p>There are several built-in functions to perform conversion from one data type to another. These functions return a new object representing the converted value.</p>\r\n<table  class="table table-bordered">\r\n<tr>\r\n<th style="text-align:center;">Sr.No.</th>\r\n<th style="text-align:center;">Function &amp; Description</th>\r\n</tr>\r\n<tr>\r\n<td class="ts">1</td>\r\n<td><p><b>int(x [,base])</b></p>\r\n<p>Converts x to an integer. base specifies the base if x is a string.</p>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td class="ts">2</td>\r\n<td>\r\n<p><b>long(x [,base] )</b></p>\r\n<p>Converts x to a long integer. base specifies the base if x is a string.</p>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td class="ts">3</td>\r\n<td>\r\n<p><b>float(x)</b></p>\r\n<p>Converts x to a floating-point number.</p>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td class="ts">4</td>\r\n<td>\r\n<p><b>complex(real [,imag])</b></p>\r\n<p>Creates a complex number.</p>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td class="ts">5</td>\r\n<td>\r\n<p><b>str(x)</b></p>\r\n<p>Converts object x to a string representation.</p>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td class="ts">6</td>\r\n<td>\r\n<p><b>repr(x)</b></p>\r\n<p>Converts object x to an expression string.</p>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td class="ts">7</td>\r\n<td>\r\n<p><b>eval(str)</b></p>\r\n<p>Evaluates a string and returns an object.</p>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td class="ts">8</td>\r\n<td>\r\n<p><b>tuple(s)</b></p>\r\n<p>Converts s to a tuple.</p>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td class="ts">9</td>\r\n<td>\r\n<p><b>list(s)</b></p>\r\n<p>Converts s to a list.</p>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td class="ts">10</td>\r\n<td>\r\n<p><b>set(s)</b></p>\r\n<p>Converts s to a set.</p>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td class="ts">11</td>\r\n<td>\r\n<p><b>dict(d)</b></p>\r\n<p>Creates a dictionary. d must be a sequence of (key,value) tuples.</p>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td class="ts">12</td>\r\n<td>\r\n<p><b>frozenset(s)</b></p>\r\n<p>Converts s to a frozen set.</p>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td class="ts">13</td>\r\n<td>\r\n<p><b>chr(x)</b></p>\r\n<p>Converts an integer to a character.</p>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td class="ts">14</td>\r\n<td>\r\n<p><b>unichr(x)</b></p>\r\n<p>Converts an integer to a Unicode character.</p>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td class="ts">15</td>\r\n<td>\r\n<p><b>ord(x)</b></p>\r\n<p>Converts a single character to its integer value.</p>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td class="ts">16</td>\r\n<td>\r\n<p><b>hex(x)</b></p>\r\n<p>Converts an integer to a hexadecimal string.</p>\r\n</td>\r\n</tr>\r\n<tr>\r\n<td class="ts">17</td>\r\n<td>\r\n<p><b>oct(x)</b></p>\r\n<p>Converts an integer to an octal string.</p>\r\n</td>\r\n</tr>\r\n</table>\r\n<hr />');
INSERT INTO `content` (`id`, `cid`, `did`, `topic`, `body`) VALUES
(12, 4, 3, 'Python - Strings\r\n', '<hr />\r\n<p>Strings are amongst the most popular types in Python. We can create them simply by enclosing characters in quotes. Python treats single quotes the same as double quotes. Creating strings is as simple as assigning a value to a variable. For example &minus;</p>\r\n<pre class="prettyprint notranslate">\r\nvar1 = ''Hello World!''\r\nvar2 = "Python Programming"\r\n</pre>\r\n<h2>Accessing Values in Strings</h2>\r\n<p>Python does not support a character type; these are treated as strings of length one, thus also considered a substring.</p>\r\n<p>To access substrings, use the square brackets for slicing along with the index or indices to obtain your substring. For example &minus;</p>\r\n<a href="http://tpcg.io/5Cb59z" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>\r\n<pre class="prettyprint notranslate">\r\n#!/usr/bin/python\r\n\r\nvar1 = ''Hello World!''\r\nvar2 = "Python Programming"\r\n\r\nprint "var1[0]: ", var1[0]\r\nprint "var2[1:5]: ", var2[1:5]\r\n</pre>\r\n<p>When the above code is executed, it produces the following result &minus;</p>\r\n<pre class="result notranslate">\r\nvar1[0]:  H\r\nvar2[1:5]:  ytho\r\n</pre>\r\n<h2>Updating Strings</h2>\r\n<p>You can "update" an existing string by (re)assigning a variable to another string. The new value can be related to its previous value or to a completely different string altogether. For example &minus;</p>\r\n<a href="http://tpcg.io/TTnzkV" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>\r\n<pre class="prettyprint notranslate">\r\n#!/usr/bin/python\r\n\r\nvar1 = ''Hello World!''\r\nprint "Updated String :- ", var1[:6] + ''Python''\r\n</pre>\r\n<p>When the above code is executed, it produces the following result &minus;</p>\r\n<pre class="result notranslate">\r\nUpdated String :-  Hello Python\r\n</pre>\r\n<h2>Escape Characters</h2>\r\n<p>Following table is a list of escape or non-printable characters that can be represented with backslash notation.</p>\r\n<p>An escape character gets interpreted; in a single quoted as well as double quoted strings.</p>\r\n<table class="table table-bordered" style="text-align:center;">\r\n<tr>\r\n<th style="text-align:center;">Backslash notation</th>\r\n<th style="text-align:center;">Hexadecimal character</th>\r\n<th class="ts">Description</th>\r\n</tr>\r\n<tr>\r\n<td>\\a</td>\r\n<td>0x07</td>\r\n<td>Bell or alert</td>\r\n</tr>\r\n<tr>\r\n<td>\\b</td>\r\n<td>0x08</td>\r\n<td>Backspace</td>\r\n</tr>\r\n<tr>\r\n<td>\\cx</td>\r\n<td>&nbsp;</td>\r\n<td>Control-x</td>\r\n</tr>\r\n<tr>\r\n<td>\\C-x</td>\r\n<td>&nbsp;</td>\r\n<td>Control-x</td>\r\n</tr>\r\n<tr>\r\n<td>\\e</td>\r\n<td>0x1b</td>\r\n<td>Escape</td>\r\n</tr>\r\n<tr>\r\n<td>\\f</td>\r\n<td>0x0c</td>\r\n<td>Formfeed</td>\r\n</tr>\r\n<tr>\r\n<td>\\M-\\C-x</td>\r\n<td>&nbsp;</td>\r\n<td>Meta-Control-x</td>\r\n</tr>\r\n<tr>\r\n<td>\\n</td>\r\n<td>0x0a</td>\r\n<td>Newline</td>\r\n</tr>\r\n<tr>\r\n<td>\\nnn</td>\r\n<td>&nbsp;</td>\r\n<td>Octal notation, where n is in the range 0.7</td>\r\n</tr>\r\n<tr>\r\n<td>\\r</td>\r\n<td>0x0d</td>\r\n<td>Carriage return</td>\r\n</tr>\r\n<tr>\r\n<td>\\s</td>\r\n<td>0x20</td>\r\n<td>Space</td>\r\n</tr>\r\n<tr>\r\n<td>\\t</td>\r\n<td>0x09</td>\r\n<td>Tab</td>\r\n</tr>\r\n<tr>\r\n<td>\\v</td>\r\n<td>0x0b</td>\r\n<td>Vertical tab</td>\r\n</tr>\r\n<tr>\r\n<td>\\x</td>\r\n<td>&nbsp;</td>\r\n<td>Character x</td>\r\n</tr>\r\n<tr>\r\n<td class="ts">\\xnn</td>\r\n<td>&nbsp;</td>\r\n<td>Hexadecimal notation, where n is in the range 0.9, a.f, or A.F</td>\r\n</tr>\r\n</table>\r\n<h2>String Special Operators</h2>\r\n<p>Assume string variable <b>a</b> holds ''Hello'' and variable <b>b</b> holds ''Python'', then &minus;</p>\r\n<table class="table table-bordered">\r\n<tr>\r\n<th style="text-align:center;width:10%">Operator</th>\r\n<th style="text-align:center;width:45%">Description</th>\r\n<th style="text-align:center;">Example</th>\r\n</tr>\r\n<tr>\r\n<td class="ts">+</td>\r\n<td>Concatenation - Adds values on either side of the operator</td>\r\n<td class="ts">a + b will give HelloPython</td>\r\n</tr>\r\n<tr>\r\n<td class="ts">*</td>\r\n<td>Repetition - Creates new strings, concatenating multiple copies of the same\r\nstring</td>\r\n<td class="ts">a*2 will give -HelloHello</td>\r\n</tr>\r\n<tr>\r\n<td class="ts">[]</td>\r\n<td>Slice - Gives the character from the given index</td>\r\n<td class="ts">a[1] will give e</td>\r\n</tr>\r\n<tr>\r\n<td class="ts">[ : ]</td>\r\n<td>Range Slice - Gives the characters from the given range</td>\r\n<td class="ts">a[1:4] will give ell</td>\r\n</tr>\r\n<tr>\r\n<td class="ts">in</td>\r\n<td>Membership - Returns true if a character exists in the given string</td>\r\n<td class="ts">H in a will give 1</td>\r\n</tr>\r\n<tr>\r\n<td class="ts">not in </td>\r\n<td>Membership - Returns true if a character does not exist in the given string</td>\r\n<td class="ts">M not in a will give 1</td>\r\n</tr>\r\n<tr>\r\n<td class="ts">r/R</td>\r\n<td>Raw String - Suppresses actual meaning of Escape characters. The syntax for raw strings is exactly the same as for normal strings with the exception of the raw string operator, the letter "r," which precedes the quotation marks. The "r" can be lowercase (r) or uppercase (R) and must be placed immediately preceding the first quote mark.</td>\r\n<td class="ts">print r''\\n'' prints \\n and print R''\\n''prints \\n</td>\r\n</tr>\r\n<tr>\r\n<td class="ts">%</td>\r\n<td>Format - Performs String formatting</td>\r\n<td class="ts">See at next section</td>\r\n</tr>\r\n</table>\r\n<h2>String Formatting Operator</h2>\r\n<p>One of Python''s coolest features is the string format operator %. This operator is unique to strings and makes up for the pack of having functions from C''s printf() family. Following is a simple example &minus;</p>\r\n<a href="http://tpcg.io/wIUTuU" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>\r\n<pre class="prettyprint notranslate">\r\n#!/usr/bin/python\r\n\r\nprint "My name is %s and weight is %d kg!" % (''Zara'', 21)\r\n</pre>\r\n<p>When the above code is executed, it produces the following result &minus;</p>\r\n<pre class="result notranslate">\r\nMy name is Zara and weight is 21 kg!\r\n</pre>\r\n<p>Here is the list of complete set of symbols which can be used along with % &minus;</p>\r\n<table class="table table-bordered">\r\n<tr>\r\n<th style="text-align:center;width:30%">Format Symbol</th>\r\n<th style="text-align:center;">Conversion</th>\r\n</tr>\r\n<tr>\r\n<td class="ts">%c</td>\r\n<td>character</td>\r\n</tr>\r\n<tr>\r\n<td class="ts">%s</td>\r\n<td>string conversion via str() prior to formatting</td>\r\n</tr>\r\n<tr>\r\n<td class="ts">%i</td>\r\n<td>signed decimal integer</td>\r\n</tr>\r\n<tr>\r\n<td class="ts">%d</td>\r\n<td>signed decimal integer</td>\r\n</tr>\r\n<tr>\r\n<td class="ts">%u</td>\r\n<td>unsigned decimal integer</td>\r\n</tr>\r\n<tr>\r\n<td class="ts">%o</td>\r\n<td>octal integer</td>\r\n</tr>\r\n<tr>\r\n<td class="ts">%x</td>\r\n<td>hexadecimal integer (lowercase letters)</td>\r\n</tr>\r\n<tr>\r\n<td class="ts">%X</td>\r\n<td>hexadecimal integer (UPPERcase letters)</td>\r\n</tr>\r\n<tr>\r\n<td class="ts">%e</td>\r\n<td>exponential notation (with lowercase ''e'')</td>\r\n</tr>\r\n<tr>\r\n<td class="ts">%E</td>\r\n<td>exponential notation (with UPPERcase ''E'')</td>\r\n</tr>\r\n<tr>\r\n<td class="ts">%f</td>\r\n<td>floating point real number</td>\r\n</tr>\r\n<tr>\r\n<td class="ts">%g</td>\r\n<td>the shorter of %f and %e</td>\r\n</tr>\r\n<tr>\r\n<td class="ts">%G</td>\r\n<td>the shorter of %f and %E</td>\r\n</tr>\r\n</table>\r\n<p>Other supported symbols and functionality are listed in the following table &minus;</p>\r\n<table class="table table-bordered">\r\n<tr>\r\n<th style="text-align:center;width:30%">Symbol</th>\r\n<th style="text-align:center;">Functionality</th>\r\n</tr>\r\n<tr>\r\n<td class="ts">*</td>\r\n<td>argument specifies width or precision</td>\r\n</tr>\r\n<tr>\r\n<td class="ts">-</td>\r\n<td>left justification</td>\r\n</tr>\r\n<tr>\r\n<td class="ts">+</td>\r\n<td>display the sign</td>\r\n</tr>\r\n<tr>\r\n<td class="ts">&lt;sp&gt;</td>\r\n<td>leave a blank space before a positive number</td>\r\n</tr>\r\n<tr>\r\n<td class="ts">#</td>\r\n<td>add the octal leading zero ( ''0'' ) or hexadecimal leading ''0x'' or ''0X'', depending on whether ''x'' or ''X'' were used.</td>\r\n</tr>\r\n<tr>\r\n<td class="ts">0</td>\r\n<td>pad from left with zeros (instead of spaces)</td>\r\n</tr>\r\n<tr>\r\n<td class="ts">%</td>\r\n<td>''%%'' leaves you with a single literal ''%''</td>\r\n</tr>\r\n<tr>\r\n<td class="ts">(var)</td>\r\n<td>mapping variable (dictionary arguments)</td>\r\n</tr>\r\n<tr>\r\n<td class="ts">m.n.</td>\r\n<td>m is the minimum total width and n is the number of digits to display after the decimal point (if appl.)</td>\r\n</tr>\r\n</table>\r\n<h2>Triple Quotes</h2>\r\n<p>Python''s triple quotes comes to the rescue by allowing strings to span multiple lines, including verbatim NEWLINEs, TABs, and any other special characters.</p>\r\n<p>The syntax for triple quotes consists of three consecutive <b>single or double</b> quotes.</p>\r\n<a href="http://tpcg.io/szN9rw" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>\r\n<pre class="prettyprint notranslate">\r\n#!/usr/bin/python\r\n\r\npara_str = """this is a long string that is made up of\r\nseveral lines and non-printable characters such as\r\nTAB ( \\t ) and they will show up that way when displayed.\r\nNEWLINEs within the string, whether explicitly given like\r\nthis within the brackets [ \\n ], or just a NEWLINE within\r\nthe variable assignment will also show up.\r\n"""\r\nprint para_str\r\n</pre>\r\n<p>When the above code is executed, it produces the following result. Note how every single special character has been converted to its printed form, right down to the last NEWLINE at the end of the string between the "up." and closing triple quotes. Also note that NEWLINEs occur either with an explicit carriage return at the end of a line or its escape code (\\n) &minus;</p>\r\n<pre class="result notranslate">\r\nthis is a long string that is made up of\r\nseveral lines and non-printable characters such as\r\nTAB (    ) and they will show up that way when displayed.\r\nNEWLINEs within the string, whether explicitly given like\r\nthis within the brackets [\r\n ], or just a NEWLINE within\r\nthe variable assignment will also show up.\r\n</pre>\r\n<p>Raw strings do not treat the backslash as a special character at all. Every character you put into a raw string stays the way you wrote it &minus;</p>\r\n<a href="http://tpcg.io/Gfq9Hl" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>\r\n<pre class="prettyprint notranslate">\r\n#!/usr/bin/python\r\n\r\nprint ''C:\\\\nowhere''\r\n</pre>\r\n<p>When the above code is executed, it produces the following result &minus;</p>\r\n<pre class="result notranslate">\r\nC:\\nowhere\r\n</pre>\r\n<p>Now let''s make use of raw string. We would put expression in <b>r''expression''</b> as follows &minus;</p>\r\n<a href="http://tpcg.io/ExGqoY" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>\r\n<pre class="prettyprint notranslate">\r\n#!/usr/bin/python\r\n\r\nprint r''C:\\\\nowhere''\r\n</pre>\r\n<p>When the above code is executed, it produces the following result &minus;</p>\r\n<pre class="result notranslate">\r\nC:\\\\nowhere\r\n</pre>\r\n<h2>Unicode String</h2>\r\n<p>Normal strings in Python are stored internally as 8-bit ASCII, while Unicode strings are stored as 16-bit Unicode. This allows for a more varied set of characters, including special characters from most languages in the world. I''ll restrict my treatment of Unicode strings to the following &minus;</p>\r\n<a href="http://tpcg.io/HUYVB4" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>\r\n<pre class="prettyprint notranslate tryit">\r\n#!/usr/bin/python\r\n\r\nprint u''Hello, world!''\r\n</pre>\r\n<p>When the above code is executed, it produces the following result &minus;</p>\r\n<pre class="result notranslate">\r\nHello, world!\r\n</pre>\r\n<p>As you can see, Unicode strings use the prefix u, just as raw strings use the prefix r.</p>\r\n<h2>Built-in String Methods</h2>\r\n<p>Python includes the following built-in methods to manipulate strings &minus;</p>\r\n<table class="table table-bordered">\r\n<tr>\r\n<th style="text-align:center;width:10%">Sr.No.</th>\r\n<th style="text-align:center;">Methods with Description</th>\r\n</tr>\r\n<tr>\r\n<td class="ts">1</td>\r\n<td><a href="/python/string_capitalize.htm">capitalize()</a>\r\n<p>Capitalizes first letter of string</p></td>\r\n</tr>\r\n<tr>\r\n<td class="ts">2</td>\r\n<td><a href="/python/string_center.htm">center(width, fillchar)</a>\r\n<p>Returns a space-padded string with the original string centered to a total of width columns.</p></td>\r\n</tr>\r\n<tr>\r\n<td class="ts">3</td>\r\n<td><a href="/python/string_count.htm">count(str, beg= 0,end=len(string))</a>\r\n<p>Counts how many times str occurs in string or in a substring of string if starting index beg and ending index end are given.</p></td>\r\n</tr>\r\n<tr>\r\n<td class="ts">4</td>\r\n<td><a href="/python/string_decode.htm">decode(encoding=''UTF-8'',errors=''strict'')</a>\r\n<p>Decodes the string using the codec registered for encoding. encoding defaults to the default string encoding.</p></td>\r\n</tr>\r\n<tr>\r\n<td class="ts">5</td>\r\n<td><a href="/python/string_encode.htm">encode(encoding=''UTF-8'',errors=''strict'')</a>\r\n<p>Returns encoded string version of string; on error, default is to raise a ValueError unless errors is given with ''ignore'' or ''replace''.</p></td>\r\n</tr>\r\n<tr>\r\n<td class="ts">6</td>\r\n<td><a href="/python/string_endswith.htm">endswith(suffix, beg=0, end=len(string))</a>\r\n<p>Determines if string or a substring of string (if starting index beg and ending index end are given) ends with suffix; returns true if so and false otherwise.</p></td>\r\n</tr>\r\n<tr>\r\n<td class="ts">7</td>\r\n<td><a href="/python/string_expandtabs.htm">expandtabs(tabsize=8)</a>\r\n<p>Expands tabs in string to multiple spaces; defaults to 8 spaces per tab if tabsize not provided.</p></td>\r\n</tr>\r\n<tr>\r\n<td class="ts">8</td>\r\n<td><a href="/python/string_find.htm">find(str, beg=0 end=len(string))</a>\r\n<p>Determine if str occurs in string or in a substring of string if starting index beg and ending index end are given returns index if found and -1 otherwise.</p></td>\r\n</tr>\r\n<tr>\r\n<td class="ts">9</td>\r\n<td><a href="/python/string_index.htm">index(str, beg=0, end=len(string))</a>\r\n<p>Same as find(), but raises an exception if str not found.</p></td>\r\n</tr>\r\n<tr>\r\n<td class="ts">10</td>\r\n<td><a href="/python/string_isalnum.htm">isalnum()</a>\r\n<p>Returns true if string has at least 1 character and all characters are alphanumeric and false otherwise.</p></td>\r\n</tr>\r\n<tr>\r\n<td class="ts">11</td>\r\n<td><a href="/python/string_isalpha.htm">isalpha()</a>\r\n<p>Returns true if string has at least 1 character and all characters are alphabetic and false otherwise.</p></td>\r\n</tr>\r\n<tr>\r\n<td class="ts">12</td>\r\n<td><a href="/python/string_isdigit.htm">isdigit()</a>\r\n<p>Returns true if string contains only digits and false otherwise.</p></td>\r\n</tr>\r\n<tr>\r\n<td class="ts">13</td>\r\n<td><a href="/python/string_islower.htm">islower()</a>\r\n<p>Returns true if string has at least 1 cased character and all cased characters are in lowercase and false otherwise.</p></td>\r\n</tr>\r\n<tr>\r\n<td class="ts">14</td>\r\n<td><a href="/python/string_isnumeric.htm">isnumeric()</a>\r\n<p>Returns true if a unicode string contains only numeric characters and false otherwise.</p></td>\r\n</tr>\r\n<tr>\r\n<td class="ts">15</td>\r\n<td><a href="/python/string_isspace.htm">isspace()</a>\r\n<p>Returns true if string contains only whitespace characters and false otherwise.</p></td>\r\n</tr>\r\n<tr>\r\n<td class="ts">16</td>\r\n<td><a href="/python/string_istitle.htm">istitle()</a>\r\n<p>Returns true if string is properly "titlecased" and false otherwise.</p></td>\r\n</tr>\r\n<tr>\r\n<td class="ts">17</td>\r\n<td><a href="/python/string_isupper.htm">isupper()</a>\r\n<p>Returns true if string has at least one cased character and all cased characters are in uppercase and false otherwise.</p></td>\r\n</tr>\r\n<tr>\r\n<td class="ts">18</td>\r\n<td><a href="/python/string_join.htm">join(seq)</a>\r\n<p>Merges (concatenates) the string representations of elements in sequence seq into a string, with separator string.</p></td>\r\n</tr>\r\n<tr>\r\n<td class="ts">19</td>\r\n<td><a href="/python/string_len.htm">len(string)</a>\r\n<p>Returns the length of the string</p></td>\r\n</tr>\r\n<tr>\r\n<td class="ts">20</td>\r\n<td><a href="/python/string_ljust.htm">ljust(width[, fillchar])</a>\r\n<p>Returns a space-padded string with the original string left-justified to a total of width columns.</p></td>\r\n</tr>\r\n<tr>\r\n<td class="ts">21</td>\r\n<td><a href="/python/string_lower.htm">lower()</a>\r\n<p>Converts all uppercase letters in string to lowercase.</p></td>\r\n</tr>\r\n<tr>\r\n<td class="ts">22</td>\r\n<td><a href="/python/string_lstrip.htm">lstrip()</a>\r\n<p>Removes all leading whitespace in string.</p></td>\r\n</tr>\r\n<tr>\r\n<td class="ts">23</td>\r\n<td><a href="/python/string_maketrans.htm">maketrans()</a>\r\n<p>Returns a translation table to be used in translate function.</p></td>\r\n</tr>\r\n<tr>\r\n<td class="ts">24</td>\r\n<td><a href="/python/string_max.htm">max(str)</a>\r\n<p>Returns the max alphabetical character from the string str.</p></td>\r\n</tr>\r\n<tr>\r\n<td class="ts">25</td>\r\n<td><a href="/python/string_min.htm">min(str)</a>\r\n<p>Returns the min alphabetical character from the string str.</p></td>\r\n</tr>\r\n<tr>\r\n<td class="ts">26</td>\r\n<td><a href="/python/string_replace.htm">replace(old, new [, max])</a>\r\n<p>Replaces all occurrences of old in string with new or at most max occurrences if max given.</p></td>\r\n</tr>\r\n<tr>\r\n<td class="ts">27</td>\r\n<td><a href="/python/string_rfind.htm">rfind(str, beg=0,end=len(string))</a>\r\n<p>Same as find(), but search backwards in string.</p></td>\r\n</tr>\r\n<tr>\r\n<td class="ts">28</td>\r\n<td><a href="/python/string_rindex.htm">rindex( str, beg=0, end=len(string))</a>\r\n<p>Same as index(), but search backwards in string.</p></td>\r\n</tr>\r\n<tr>\r\n<td class="ts">29</td>\r\n<td><a href="/python/string_rjust.htm">rjust(width,[, fillchar])</a>\r\n<p>Returns a space-padded string with the original string right-justified to a total of width columns.</p></td>\r\n</tr>\r\n<tr>\r\n<td class="ts">30</td>\r\n<td><a href="/python/string_rstrip.htm">rstrip()</a>\r\n<p>Removes all trailing whitespace of string.</p></td>\r\n</tr>\r\n<tr>\r\n<td class="ts">31</td>\r\n<td><a href="/python/string_split.htm">split(str="", num=string.count(str))</a>\r\n<p>Splits string according to delimiter str (space if not provided) and returns list of substrings; split into at most num substrings if given.</p></td>\r\n</tr>\r\n<tr>\r\n<td class="ts">32</td>\r\n<td><a href="/python/string_splitlines.htm">splitlines( num=string.count(''\\n''))</a>\r\n<p>Splits string at all (or num) NEWLINEs and returns a list of each line with NEWLINEs removed.</p></td>\r\n</tr>\r\n<tr>\r\n<td class="ts">33</td>\r\n<td><a href="/python/string_startswith.htm">startswith(str, beg=0,end=len(string))</a>\r\n<p>Determines if string or a substring of string (if starting index beg and ending index end are given) starts with substring str; returns true if so and false otherwise.</p></td>\r\n</tr>\r\n<tr>\r\n<td class="ts">34</td>\r\n<td><a href="/python/string_strip.htm">strip([chars])</a>\r\n<p>Performs both lstrip() and rstrip() on string.</p></td>\r\n</tr>\r\n<tr>\r\n<td class="ts">35</td>\r\n<td><a href="/python/string_swapcase.htm">swapcase()</a>\r\n<p>Inverts case for all letters in string.</p></td>\r\n</tr>\r\n<tr>\r\n<td class="ts">36</td>\r\n<td><a href="/python/string_title.htm">title()</a>\r\n<p>Returns "titlecased" version of string, that is, all words begin with uppercase and the rest are lowercase.</p></td>\r\n</tr>\r\n<tr>\r\n<td class="ts">37</td>\r\n<td><a href="/python/string_translate.htm">translate(table, deletechars="")</a>\r\n<p>Translates string according to translation table str(256 chars), removing those in the del string.</p></td>\r\n</tr>\r\n<tr>\r\n<td class="ts">38</td>\r\n<td><a href="/python/string_upper.htm">upper()</a>\r\n<p>Converts lowercase letters in string to uppercase.</p></td>\r\n</tr>\r\n<tr>\r\n<td class="ts">39</td>\r\n<td><a href="/python/string_zfill.htm">zfill (width)</a>\r\n<p>Returns original string leftpadded with zeros to a total of width characters; intended for numbers, zfill() retains any sign given (less one zero).</p></td>\r\n</tr>\r\n<tr>\r\n<td class="ts">40</td>\r\n<td><a href="/python/string_isdecimal.htm">isdecimal()</a>\r\n<p>Returns true if a unicode string contains only decimal characters and false otherwise.</p></td>\r\n</tr>\r\n</table>\r\n<hr />\r\n<div class="pre-btn">\r\n<a href="/python/python_numbers.htm"><i class="icon icon-arrow-circle-o-left big-font"></i> Previous Page</a>\r\n</div>\r\n<div class="print-btn center">\r\n<a href="/cgi-bin/printpage.cgi" target="_blank"><i class="icon icon-print big-font"></i> Print</a>\r\n</div>\r\n<div class="nxt-btn">\r\n<a href="/python/python_lists.htm">Next Page <i class="icon icon-arrow-circle-o-right big-font"></i>&nbsp;</a>\r\n</div>\r\n<hr />'),
(13, 6, 1, 'C Tutorial\r\n', '<p>C is a general-purpose, procedural, imperative computer programming language developed in 1972 by Dennis M. Ritchie at the Bell Telephone Laboratories to develop the UNIX operating system. C is the most widely used computer language. It keeps fluctuating at number one scale of popularity along with Java programming language, which is also equally popular and most widely used among modern software programmers.</p>\r\n<h1>Audience</h1>\r\n<p>This tutorial is designed for software programmers with a need to understand the C programming language starting from scratch. This tutorial will give you enough understanding on C programming language from where you can take yourself to higher level of expertise.</p>\r\n<h1>Prerequisites</h1>\r\n<p>Before proceeding with this tutorial, you should have a basic understanding of Computer Programming terminologies. A basic understanding of any of the programming languages will help you in understanding the C programming concepts and move fast on the learning track.</p>'),
(14, 6, 2, 'C - Basic Syntax\r\n', '<hr />\r\n<p>You have seen the basic structure of a C program, so it will be easy to understand other basic building blocks of the C programming language.</p>\r\n<h2>Tokens in C</h2>\r\n<p>A C program consists of various tokens and a token is either a keyword, an identifier, a constant, a string literal, or a symbol. For example, the following C statement consists of five tokens &minus;</p>\r\n<pre class="prettyprint notranslate">\r\nprintf("Hello, World! \\n");\r\n</pre>\r\n<p>The individual tokens are &minus;</p>\r\n<pre class="prettyprint notranslate">\r\nprintf\r\n(\r\n"Hello, World! \\n"\r\n)\r\n;\r\n</pre>\r\n<h2>Semicolons</h2>\r\n<p>In a C program, the semicolon is a statement terminator. That is, each individual statement must be ended with a semicolon. It indicates the end of one logical entity.</p>\r\n<p>Given below are two different statements &minus;</p>\r\n<pre class="prettyprint notranslate">\r\nprintf("Hello, World! \\n");\r\nreturn 0;\r\n</pre>\r\n<h2>Comments</h2>\r\n<p>Comments are like helping text in your C program and they are ignored by the compiler. They start with /* and terminate with the characters */ as shown below &minus;</p>\r\n<pre class="result notranslate">\r\n/* my first program in C */\r\n</pre>\r\n<p>You cannot have comments within comments and they do not occur within a string or character literals.</p>\r\n<h2>Identifiers</h2>\r\n<p>A C identifier is a name used to identify a variable, function, or any other user-defined item. An identifier starts with a letter A to Z, a to z, or an underscore ''_'' followed by zero or more letters, underscores, and digits (0 to 9).</p>\r\n<p>C does not allow punctuation characters such as @, $, and % within identifiers. C is a <b>case-sensitive</b> programming language. Thus, <i>Manpower</i> and <i>manpower</i> are two different identifiers in C. Here are some examples of acceptable identifiers &minus;</p>\r\n<pre class="result notranslate">\r\nmohd       zara    abc   move_name  a_123\r\nmyname50   _temp   j     a23b9      retVal\r\n</pre>\r\n<h2>Keywords</h2>\r\n<p>The following list shows the reserved words in C. These reserved words may not be used as constants or variables or any other identifier names.</p>\r\n<table style="text-align:center;" class="table table-bordered">\r\n<tr>\r\n<td style="width:25%">auto</td>\r\n<td style="width:25%">else</td>\r\n<td style="width:25%">long</td>\r\n<td style="width:25%">switch</td>\r\n</tr>\r\n<tr>\r\n<td>break</td>\r\n<td>enum</td>\r\n<td>register</td>\r\n<td>typedef</td>\r\n</tr>\r\n<tr>\r\n<td>case</td>\r\n<td>extern</td>\r\n<td>return</td>\r\n<td>union</td>\r\n</tr>\r\n<tr>\r\n<td>char</td>\r\n<td>float</td>\r\n<td>short</td>\r\n<td>unsigned</td>\r\n</tr>\r\n<tr>\r\n<td>const</td>\r\n<td>for</td>\r\n<td>signed</td>\r\n<td>void</td>\r\n</tr>\r\n<tr>\r\n<td>continue</td>\r\n<td>goto</td>\r\n<td>sizeof</td>\r\n<td>volatile</td>\r\n</tr>\r\n<tr>\r\n<td>default</td>\r\n<td>if</td>\r\n<td>static</td>\r\n<td>while</td>\r\n</tr>\r\n<tr>\r\n<td>do</td>\r\n<td>int</td>\r\n<td>struct</td>\r\n<td>_Packed</td>\r\n</tr>\r\n<tr>\r\n<td>double</td>\r\n<td></td>\r\n<td></td>\r\n<td></td>\r\n</tr>\r\n</table>\r\n<h2>Whitespace in C</h2>\r\n<p>A line containing only whitespace, possibly with a comment, is known as a blank line, and a C compiler totally ignores it.</p>\r\n<p>Whitespace is the term used in C to describe blanks, tabs, newline characters and comments. Whitespace separates one part of a statement from another and enables the compiler to identify where one element in a statement, such as int, ends and the next element begins. Therefore, in the following statement &minus;</p>\r\n<pre class="prettyprint notranslate">\r\nint age;\r\n</pre>\r\n<p>there must be at least one whitespace character (usually a space) between int and age for the compiler to be able to distinguish them. On the other hand, in the following statement &minus;</p>\r\n<pre class="prettyprint notranslate">\r\nfruit = apples + oranges;   // get the total fruit\r\n</pre>\r\n<p>no whitespace characters are necessary between fruit and =, or between = and apples, although you are free to include some if you wish to increase readability.</p>\r\n<hr />'),
(15, 6, 3, 'C - Variables\r\n', '<hr />\r\n<div class="pre-btn">\r\n<a href="/cprogramming/c_data_types.htm"><i class="icon icon-arrow-circle-o-left big-font"></i> Previous Page</a>\r\n</div>\r\n<div class="nxt-btn">\r\n<a href="/cprogramming/c_constants.htm">Next Page <i class="icon icon-arrow-circle-o-right big-font"></i>&nbsp;</a>\r\n</div>\r\n<div class="clearer"></div>\r\n<hr />\r\n<p>A variable is nothing but a name given to a storage area that our programs can manipulate. Each variable in C has a specific type, which determines the size and layout of the variable''s memory; the range of values that can be stored within that memory; and the set of operations that can be applied to the variable.</p>\r\n<p>The name of a variable can be composed of letters, digits, and the underscore character. It must begin with either a letter or an underscore. Upper and lowercase letters are distinct because C is case-sensitive. Based on the basic types explained in the previous chapter, there will be the following basic variable types &minus;</p>\r\n<table class="table table-bordered">\r\n<tr>\r\n<th>Sr.No.</th>\r\n<th style="text-align:center;">Type &amp; Description</th>\r\n</tr>\r\n<tr>\r\n<td class="ts">1</td>\r\n<td><p><b>char</b></p>\r\n<p>Typically a single octet(one byte). This is an integer type.</p></td>\r\n</tr>\r\n<tr>\r\n<td class="ts">2</td>\r\n<td><p><b>int</b></p>\r\n<p>The most natural size of integer for the machine.</p></td>\r\n</tr>\r\n<tr>\r\n<td class="ts">3</td>\r\n<td><p><b>float</b></p>\r\n<p>A single-precision floating point value.</p></td>\r\n</tr>\r\n<tr>\r\n<td class="ts">4</td>\r\n<td><p><b>double</b></p>\r\n<p>A double-precision floating point value.</p></td>\r\n</tr>\r\n<tr>\r\n<td class="ts">5</td>\r\n<td><p><b>void</b></p>\r\n<p>Represents the absence of type.</p></td>\r\n</tr>\r\n</table>\r\n<p>C programming language also allows to define various other types of variables, which we will cover in subsequent chapters like Enumeration, Pointer, Array, Structure, Union, etc. For this chapter, let us study only basic variable types.</p>\r\n<h2>Variable Definition in C</h2>\r\n<p>A variable definition tells the compiler where and how much storage to create for the variable. A variable definition specifies a data type and contains a list of one or more variables of that type as follows &minus;</p>\r\n<pre class="result notranslate">\r\ntype variable_list;\r\n</pre>\r\n<p>Here, <b>type</b> must be a valid C data type including char, w_char, int, float, double, bool, or any user-defined object; and <b>variable_list</b> may consist of one or more identifier names separated by commas. Some valid declarations are shown here &minus;</p>\r\n<pre class="result notranslate">\r\nint    i, j, k;\r\nchar   c, ch;\r\nfloat  f, salary;\r\ndouble d;\r\n</pre>\r\n<p>The line <b>int i, j, k;</b> declares and defines the variables i, j, and k;  which instruct the compiler to create variables named i, j and k of type int.</p>\r\n<p>Variables can be initialized (assigned an initial value) in their declaration. The initializer consists of an equal sign followed by a constant expression as follows &minus;</p>\r\n<pre class="result notranslate">\r\ntype variable_name = value;\r\n</pre>\r\n<p>Some examples are &minus;</p>\r\n<pre class="result notranslate">\r\nextern int d = 3, f = 5;    // declaration of d and f. \r\nint d = 3, f = 5;           // definition and initializing d and f. \r\nbyte z = 22;                // definition and initializes z. \r\nchar x = ''x'';               // the variable x has the value ''x''.\r\n</pre>\r\n<p>For definition without an initializer: variables with static storage duration are implicitly initialized with NULL (all bytes have the value 0); the initial value of all other variables are undefined.</p>\r\n<h2>Variable Declaration in C</h2>\r\n<p>A variable declaration provides assurance to the compiler that there exists a variable with the given type and name so that the compiler can proceed for further compilation without requiring the complete detail about the variable. A variable definition has its meaning at the time of compilation only, the compiler needs actual variable definition at the time of linking the program.</p>\r\n<p>A variable declaration is useful when you are using multiple files and you define your variable in one of the files which will be available at the time of linking of the program. You will use the  keyword <b>extern</b> to declare a variable at any place. Though you can declare a variable multiple times in your C program, it can be defined only once in a file, a function, or a block of code.</p>\r\n<h3>Example</h3>\r\n<p>Try the following example, where variables have been declared at the top, but they have been defined and initialized inside the main function &minus;</p>\r\n<a href="http://tpcg.io/73XWiV" target="_blank" rel="nofollow" class="demo"><i class="fa-external-link"></i> Live Demo</a>\r\n<pre class="prettyprint notranslate">\r\n#include &lt;stdio.h&gt;\r\n\r\n// Variable declaration:\r\nextern int a, b;\r\nextern int c;\r\nextern float f;\r\n\r\nint main () {\r\n\r\n   /* variable definition: */\r\n   int a, b;\r\n   int c;\r\n   float f;\r\n \r\n   /* actual initialization */\r\n   a = 10;\r\n   b = 20;\r\n  \r\n   c = a + b;\r\n   printf("value of c : %d \\n", c);\r\n\r\n   f = 70.0/3.0;\r\n   printf("value of f : %f \\n", f);\r\n \r\n   return 0;\r\n}\r\n</pre>\r\n<p>When the above code is compiled and executed, it produces the following result &minus;</p>\r\n<pre class="result notranslate">\r\nvalue of c : 30\r\nvalue of f : 23.333334\r\n</pre>\r\n<p>The same concept applies on function declaration where you provide a function name at the time of its declaration and its actual definition can be given anywhere else. For example &minus;</p>\r\n<pre class="prettyprint notranslate">\r\n// function declaration\r\nint func();\r\n\r\nint main() {\r\n\r\n   // function call\r\n   int i = func();\r\n}\r\n\r\n// function definition\r\nint func() {\r\n   return 0;\r\n}\r\n</pre>\r\n<h2>Lvalues and Rvalues in C</h2>\r\n<p>There are two kinds of expressions in C &minus;</p>\r\n<ul class="list">\r\n<li><p><b>lvalue</b> &minus; Expressions that refer to a memory location are called "lvalue" expressions. An lvalue may appear as either the left-hand or right-hand side of an assignment.</p></li>\r\n<li><p><b>rvalue</b> &minus; The term rvalue refers to a data value that is stored at some address in memory. An rvalue is an expression that cannot have a value assigned to it which means an rvalue may appear on the right-hand side but not on the left-hand side of an assignment.</p></li>\r\n</ul>\r\n<p>Variables are lvalues and so they may appear on the left-hand side of an assignment. Numeric literals are rvalues and so they may not be assigned and cannot appear on the left-hand side. Take a look at the following valid and invalid statements &minus;</p>\r\n<pre class="result notranslate">\r\nint g = 20; // valid statement\r\n\r\n10 = 20; // invalid statement; would generate compile-time error\r\n</pre>\r\n<hr />\r\n<div class="pre-btn">\r\n<a href="/cprogramming/c_data_types.htm"><i class="icon icon-arrow-circle-o-left big-font"></i> Previous Page</a>\r\n</div>\r\n<div class="print-btn center">\r\n<a href="/cgi-bin/printpage.cgi" target="_blank"><i class="icon icon-print big-font"></i> Print</a>\r\n</div>\r\n<div class="nxt-btn">\r\n<a href="/cprogramming/c_constants.htm">Next Page <i class="icon icon-arrow-circle-o-right big-font"></i>&nbsp;</a>\r\n</div>\r\n<hr />'),
(16, 5, 1, 'Javascript Tutorial\r\n', '<p>JavaScript is a lightweight, interpreted programming language. It is designed for creating network-centric applications. It is complimentary to and integrated with Java. JavaScript is very easy to implement because it is integrated with HTML. It is open and cross-platform.</p>\r\n<h1>Audience</h1>\r\n<p>This tutorial has been prepared for JavaScript beginners to help them understand the basic functionality of JavaScript to build dynamic web pages and web applications.</p>\r\n<h1>Prerequisites</h1>\r\n<p>For this tutorial, it is assumed that the reader have a prior knowledge of HTML coding. It would help if the reader had some prior exposure to object-oriented programming concepts and a general idea on creating online applications.</p>\r\n<!--<h1>JavaScript Offline Mobile App</h1>\r\n<a href="https://play.google.com/store/apps/details?id=com.tutorialspoint.offlineviewer.JavaScript" title="JavaScript offline Mobile App" rel="nofollow" target="_blank"><img src="/javascript/images/javascript-offline.jpg" alt="JavaScript offline Mobile App"/></a>-->\r\n<h1>Execute JavaScript Online</h1>\r\n<p>For most of the examples given in this tutorial you will find Try it option, so just make use of this option to execute your JavaScript programs at the spot and enjoy your learning.</p>\r\n<p>Try following example using Try it option available at the top right corner of the below sample code box &minus;</p>\r\n<pre class="prettyprint notranslate tryit">\r\n&lt;html&gt;\r\n   &lt;body&gt;\r\n   \r\n      &lt;script language="javascript" type="text/javascript"&gt;\r\n         &lt;!--\r\n            document.write("Hello World!")\r\n         //--&gt;\r\n      &lt;/script&gt;\r\n      \r\n   &lt;/body&gt;\r\n&lt;/html&gt;\r\n</pre>\r\n<hr />'),
(17, 5, 2, 'JavaScript - Syntax\r\n', '<hr />\r\n<p>JavaScript can be implemented using JavaScript statements that are placed within the <b>&lt;script&gt;... &lt;/script&gt;</b>.</p>\r\n<p>You can place the <b>&lt;script&gt;</b> tags, containing your JavaScript, anywhere within your web page, but it is normally recommended that you should keep it within the <b>&lt;head&gt;</b> tags.</p>\r\n<p>The &lt;script&gt; tag alerts the browser program to start interpreting all the text between these tags as a script. A simple syntax of your JavaScript will appear as follows.</p>\r\n<pre class="prettyprint notranslate">\r\n&lt;script ...&gt;\r\n   JavaScript code\r\n&lt;/script&gt;\r\n</pre>\r\n<p>The script tag takes two important attributes &minus;</p>\r\n<ul class="list">\r\n<li><p><b>Language</b> &minus; This attribute specifies what scripting language you are using. Typically, its value will be javascript. Although recent versions of HTML (and XHTML, its successor) have phased out the use of this attribute.</p></li>\r\n<li><p><b>Type</b> &minus; This attribute is what is now recommended to indicate the scripting language in use and its value should be set to "text/javascript".</p></li>\r\n</ul>\r\n<p>So your JavaScript segment will look like &minus;</p>\r\n<pre class="prettyprint notranslate">\r\n&lt;script language="javascript" type="text/javascript"&gt;\r\n   JavaScript code\r\n&lt;/script&gt;\r\n</pre>\r\n<h2>Your First JavaScript Script</h2>\r\n<p>Let us take a sample example to print out "Hello World". We added an optional HTML comment that surrounds our JavaScript code. This is to save our code from a browser that does not support JavaScript. The comment ends with a "//--&gt;". Here "//" signifies a comment in JavaScript, so we add that to prevent a browser from reading the end of the HTML comment as a piece of JavaScript code. Next, we call a function <b>document.write</b> which writes a string into our HTML document.</p>\r\n<p>This function can be used to write text, HTML, or both. Take a look at the following code.</p>\r\n<pre class="prettyprint notranslate tryit">\r\n&lt;html&gt;\r\n   &lt;body&gt;\r\n      &lt;script language="javascript" type="text/javascript"&gt;\r\n         &lt;!--\r\n            document.write("Hello World!")\r\n         //--&gt;\r\n      &lt;/script&gt;\r\n   &lt;/body&gt;\r\n&lt;/html&gt;\r\n</pre>\r\n<p>This code will produce the following result &minus;</p>\r\n<pre class="result notranslate">\r\nHello World!\r\n</pre> \r\n<h2>Whitespace and Line Breaks</h2>\r\n<p>JavaScript ignores spaces, tabs, and newlines that appear in JavaScript programs. You can use spaces, tabs, and newlines freely in your program and you are free to format and indent your programs in a neat and consistent way that makes the code easy to read and understand.</p>\r\n<h2>Semicolons are Optional</h2>\r\n<p>Simple statements in JavaScript are generally followed by a semicolon character, just as they are in C, C++, and Java. JavaScript, however, allows you to omit this semicolon if each of your statements are placed on a separate line. For example, the following code could be written without semicolons.</p>\r\n<pre class="prettyprint notranslate">\r\n&lt;script language="javascript" type="text/javascript"&gt;\r\n   &lt;!--\r\n      var1 = 10\r\n      var2 = 20\r\n   //--&gt;\r\n&lt;/script&gt;\r\n</pre>\r\n<p>But when formatted in a single line as follows, you must use semicolons &minus;</p>\r\n<pre class="prettyprint notranslate">\r\n&lt;script language="javascript" type="text/javascript"&gt;\r\n   &lt;!--\r\n      var1 = 10; var2 = 20;\r\n   //--&gt;\r\n&lt;/script&gt;\r\n</pre>\r\n<p><b>Note</b> &minus; It is a good programming practice to use semicolons.</p>\r\n<h2>Case Sensitivity</h2>\r\n<p>JavaScript is a case-sensitive language. This means that the language keywords, variables, function names, and any other identifiers must always be typed with a consistent capitalization of letters.</p>\r\n<p>So the identifiers <b>Time</b> and <b>TIME</b> will convey different meanings in JavaScript.</p>\r\n<p><b>NOTE</b> &minus; Care should be taken while writing variable and function names in JavaScript.</p>\r\n<h2>Comments in JavaScript</h2>\r\n<p>JavaScript supports both C-style and C++-style comments, Thus &minus;</p>\r\n<ul class="list">\r\n<li><p>Any text between a // and the end of a line is treated as a comment and is ignored by JavaScript.</p></li>\r\n<li><p>Any text between the characters /* and */ is treated as a comment. This may span multiple lines.</p></li>\r\n<li><p>JavaScript also recognizes the HTML comment opening sequence &lt;!--. JavaScript treats this as a single-line comment, just as it does the // comment.</p></li>\r\n<li><p>The HTML comment closing sequence --&gt; is  not recognized by JavaScript so it should be written as //--&gt;.</p></li>\r\n</ul>\r\n<h3>Example</h3>\r\n<p>The following example shows how to use comments in JavaScript.</p>\r\n<pre class="prettyprint notranslate">\r\n&lt;script language="javascript" type="text/javascript"&gt;\r\n   &lt;!--\r\n   \r\n      // This is a comment. It is similar to comments in C++\r\n   \r\n      /*\r\n      * This is a multiline comment in JavaScript\r\n      * It is very similar to comments in C Programming\r\n      */\r\n   \r\n   //--&gt;\r\n&lt;/script&gt;\r\n</pre>\r\n<hr />'),
(18, 5, 3, 'JavaScript - Variables\r\n', '<hr />\r\n<h2>JavaScript Datatypes</h2>\r\n<p>One of the most fundamental characteristics of a programming language is the set of data types it supports. These are the type of values that can be represented and manipulated in a programming language.</p>\r\n<p>JavaScript allows you to work with three primitive data types &minus;</p>\r\n<ul class="list">\r\n<li><p><b>Numbers,</b> eg. 123, 120.50 etc.</p></li>\r\n<li><p><b>Strings</b> of text  e.g. "This text string" etc.</p></li>\r\n<li><p><b>Boolean</b> e.g. true or false.</p></li>\r\n</ul>\r\n<p>JavaScript also defines two trivial data types, <b>null</b> and <b>undefined,</b> each of which defines only a single value. In addition to these primitive data types, JavaScript supports a composite data type known as <b>object</b>. We will cover objects in detail in a separate chapter.</p>\r\n<p><b>Note</b> &minus; JavaScript does not make a distinction between integer values and floating-point values. All numbers in JavaScript are represented as floating-point values. JavaScript represents numbers using the 64-bit floating-point format defined by the IEEE 754 standard.</p>\r\n<h2>JavaScript Variables</h2>\r\n<p>Like many other programming languages, JavaScript has variables. Variables can be thought of as named containers. You can place data into these containers and then refer to the data simply by naming the container.</p>\r\n<p>Before you use a variable in a JavaScript program, you must declare it. Variables are declared with the <b>var</b> keyword as follows.</p>\r\n<pre class="prettyprint notranslate">\r\n&lt;script type="text/javascript"&gt;\r\n   &lt;!--\r\n      var money;\r\n      var name;\r\n   //--&gt;\r\n&lt;/script&gt;\r\n</pre>\r\n<p>You can also declare multiple variables with the same <b>var</b> keyword as follows &minus;</p>\r\n<pre class="prettyprint notranslate">\r\n&lt;script type="text/javascript"&gt;\r\n   &lt;!--\r\n      var money, name;\r\n   //--&gt;\r\n&lt;/script&gt;\r\n</pre>\r\n<p>Storing a value in a variable is called <b>variable initialization</b>. You can do variable initialization at the time of variable creation or at a later point in time when you need that variable.</p>\r\n<p>For instance, you might create a variable named <b>money</b> and assign the value 2000.50 to it later. For another variable, you can assign a value at the time of initialization as follows.</p>\r\n<pre class="prettyprint notranslate tryit">\r\n&lt;script type="text/javascript"&gt;\r\n   &lt;!--\r\n      var name = "Ali";\r\n      var money;\r\n      money = 2000.50;\r\n   //--&gt;\r\n&lt;/script&gt;\r\n</pre>\r\n<p><b>Note</b> &minus; Use the <b>var</b> keyword only for declaration or initialization, once for the life of any variable name in a document. You should not re-declare same variable twice.</p>\r\n<p>JavaScript is <b>untyped</b> language. This means that a JavaScript variable can hold a value of any data type. Unlike many other languages, you don''t have to tell JavaScript during variable declaration what type of value the variable will hold. The value type of a variable can change during the execution of a program and JavaScript takes care of it automatically.</p>\r\n<h2>JavaScript Variable Scope</h2>\r\n<p>The scope of a variable is the region of your program in which it is defined. JavaScript variables have only two scopes.</p>\r\n<ul class="list">\r\n<li><p><b>Global Variables</b> &minus; A global variable has global scope which means it can be defined anywhere in your JavaScript code.</p></li>\r\n<li><p><b>Local Variables</b> &minus; A local variable will be visible only within a function where it is defined. Function parameters are always local to that function.</p></li>\r\n</ul>\r\n<p>Within the body of a function, a local variable takes precedence over a global variable with the same name. If you declare a local variable or function parameter with the same name as a global variable, you effectively hide the global variable. Take a look into the following example.</p>\r\n<pre class="prettyprint notranslate tryit">\r\n&lt;html&gt;\r\n   &lt;body onload = checkscope();&gt;\r\n      &lt;script type = "text/javascript"&gt;\r\n         &lt;!--\r\n            var myVar = "global"; // Declare a global variable\r\n            function checkscope( ) {\r\n               var myVar = "local";  // Declare a local variable\r\n               document.write(myVar);\r\n            }\r\n         //--&gt;\r\n      &lt;/script&gt;\r\n   &lt;/body&gt;\r\n&lt;/html&gt;\r\n</pre>\r\n<p>This produces the following result &minus;</p>\r\n<pre class="result notranslate">\r\nlocal\r\n</pre>\r\n<h2>JavaScript Variable Names</h2>\r\n<p>While naming your variables in JavaScript, keep the following rules in mind.</p>\r\n<ul class="list">\r\n<li><p>You should not use any of the JavaScript reserved keywords as a variable name. These keywords are mentioned in the next section. For example, <b>break</b> or <b>boolean</b> variable names are not valid.</p></li>\r\n<li><p>JavaScript variable names should not start with a numeral (0-9). They must begin with a letter or an underscore character. For example, <b>123test</b> is an invalid variable name but <b>_123test</b> is a valid one.</p></li>\r\n<li><p>JavaScript variable names are case-sensitive. For example, <b>Name</b> and <b>name</b> are two different variables.</p></li>\r\n</ul>\r\n<h2>JavaScript Reserved Words</h2>\r\n<p>A list of all the reserved words in JavaScript are given in the following table. They cannot be used as JavaScript variables, functions, methods, loop labels, or any object names.</p>\r\n<table class="table table-bordered" style="text-align:center;">\r\n<tr>\r\n<td>abstract</td>\r\n<td>else</td>\r\n<td>instanceof</td>\r\n<td>switch</td>\r\n</tr>\r\n<tr>\r\n<td>boolean</td>\r\n<td>enum</td>\r\n<td>int</td>\r\n<td>synchronized</td>\r\n</tr>\r\n<tr>\r\n<td>break</td>\r\n<td>export</td>\r\n<td>interface</td>\r\n<td>this</td>\r\n</tr>\r\n<tr>\r\n<td>byte</td>\r\n<td>extends</td>\r\n<td>long</td>\r\n<td>throw</td>\r\n</tr>\r\n<tr>\r\n<td>case</td>\r\n<td>false</td>\r\n<td>native</td>\r\n<td>throws</td>\r\n</tr>\r\n<tr>\r\n<td>catch</td>\r\n<td>final</td>\r\n<td>new</td>\r\n<td>transient</td>\r\n</tr>\r\n<tr>\r\n<td>char</td>\r\n<td>finally</td>\r\n<td>null</td>\r\n<td>true</td>\r\n</tr>\r\n<tr>\r\n<td>class</td>\r\n<td>float</td>\r\n<td>package</td>\r\n<td>try</td>\r\n</tr>\r\n<tr>\r\n<td>const</td>\r\n<td>for</td>\r\n<td>private</td>\r\n<td>typeof</td>\r\n</tr>\r\n<tr>\r\n<td>continue</td>\r\n<td>function</td>\r\n<td>protected</td>\r\n<td>var</td>\r\n</tr>\r\n<tr>\r\n<td>debugger</td>\r\n<td>goto</td>\r\n<td>public</td>\r\n<td>void</td>\r\n</tr>\r\n<tr>\r\n<td>default</td>\r\n<td>if</td>\r\n<td>return</td>\r\n<td>volatile</td>\r\n</tr>\r\n<tr>\r\n<td>delete</td>\r\n<td>implements</td>\r\n<td>short</td>\r\n<td>while</td>\r\n</tr>\r\n<tr>\r\n<td>do</td>\r\n<td>import</td>\r\n<td>static</td>\r\n<td>with</td>\r\n</tr>\r\n<tr>\r\n<td>double</td>\r\n<td>in</td>\r\n<td>super</td>\r\n<td></td>\r\n</tr>\r\n</table>\r\n<hr />'),
(19, 2, 1, 'Java Tutorial\r\n', '<p>Java is a high-level programming language originally developed by Sun Microsystems and released in 1995. Java runs on a variety of platforms, such as Windows, Mac OS, and the various versions of UNIX. This tutorial gives a complete understanding of Java. This reference will take you through simple and practical approaches while learning Java Programming language.</p>\r\n<h1>Audience</h1>\r\n<p>This tutorial has been prepared for the beginners to help them understand the basic to advanced concepts related to Java Programming language.</p>\r\n<h1>Prerequisites</h1>\r\n<p>Before you start practicing various types of examples given in this reference, we assume that you are already aware about computer programs and computer programming languages.</p>\r\n<hr />');
INSERT INTO `content` (`id`, `cid`, `did`, `topic`, `body`) VALUES
(20, 2, 2, 'Java - Basic Syntax\r\n', '<p>When we consider a Java program, it can be defined as a collection of objects that communicate via invoking each other''s methods. Let us now briefly look into what do class, object, methods, and instance variables mean.</p>\r\n<ul class="list">\r\n<li><p><b>Object</b> &minus; Objects have states and behaviors. Example: A dog has states - color, name, breed as well as behavior such as wagging their tail, barking, eating. An object is an instance of a class.</p></li>\r\n<li><p><b>Class</b> &minus; A class can be defined as a template/blueprint that describes the behavior/state that the object of its type supports.</p></li>\r\n<li><p><b>Methods</b> &minus; A method is basically a behavior. A class can contain many methods. It is in methods where the logics are written, data is manipulated and all the actions are executed.</p></li>\r\n<li><p><b>Instance Variables</b> &minus; Each object has its unique set of instance variables. An object''s state is created by the values assigned to these instance variables.</p></li>\r\n</ul>\r\n<h2>First Java Program</h2>\r\n<p>Let us look at a simple code that will print the words <b><i>Hello World</i></b>.</p>\r\n<h3>Example</h3>\r\n<a href="http://tpcg.io/tv5b2l" target="_blank" class="demo" rel="nofollow"><i class="fa-external-link"></i> Live Demo</a>\r\n<pre class="prettyprint notranslate">\r\npublic class MyFirstJavaProgram {\r\n\r\n   /* This is my first java program.\r\n    * This will print ''Hello World'' as the output\r\n    */\r\n\r\n   public static void main(String []args) {\r\n      System.out.println("Hello World"); // prints Hello World\r\n   }\r\n}\r\n</pre>\r\n<p>Let''s look at how to save the file, compile, and run the program. Please follow the subsequent steps &minus;</p>\r\n<ul class="list">\r\n<li><p>Open notepad and add the code as above.</p></li>\r\n<li><p>Save the file as: MyFirstJavaProgram.java.</p></li>\r\n<li><p>Open a command prompt window and go to the directory where you saved the 	class. Assume it''s C:\\.</p></li>\r\n<li><p>Type ''javac MyFirstJavaProgram.java'' and press enter to compile your code. If there are no errors in your code, the command prompt will take you to the next line (Assumption : The path variable is set).</p></li>\r\n<li><p>Now, type '' java MyFirstJavaProgram '' to run your program.</p></li>	\r\n<li><p>You will be able to see '' Hello World '' printed on the window.</p></li>\r\n</ul>\r\n<h3>Output</h3>\r\n<pre class="result notranslate">\r\nC:\\&gt; javac MyFirstJavaProgram.java\r\nC:\\&gt; java MyFirstJavaProgram \r\nHello World\r\n</pre>\r\n<h2>Basic Syntax</h2>\r\n<p>About Java programs, it is very important to keep in mind the following points.</p>\r\n<ul class="list">\r\n<li><p><b>Case Sensitivity</b> &minus; Java is case sensitive, which means identifier <b>Hello</b> and <b>hello</b> would have different meaning in Java.</p></li>\r\n<li><p><b>Class Names</b> &minus; For all class names the first letter should be in Upper Case. If several words are used to form a name of the class, each inner word''s first letter should be in Upper Case.</p>\r\n<p><b>Example:</b> <i>class MyFirstJavaClass</i></p></li>\r\n<li><p><b>Method Names</b> &minus; All method names should start with a Lower Case letter. If several words are  used to form the name of the method, then each inner word''s first letter should be in Upper Case.</p>\r\n<p><b>Example:</b> <i>public void myMethodName()</i></p></li>\r\n<li><p><b>Program File Name</b> &minus; Name of the program file should exactly match the class name.</p>\r\n<p>When saving the file, you should save it using the class name (Remember Java is case sensitive) and append ''.java'' to the end of the name (if the file name and the class name do not match, your program will not compile).</p>\r\n<p><b>Example:</b> Assume ''MyFirstJavaProgram'' is the class name. Then the file should be saved as <i>''MyFirstJavaProgram.java''</i></p></li>\r\n<li><p><b>public static void main(String args[])</b> &minus; Java program processing starts from the main() method which is a mandatory part of every Java program.</p></li>\r\n</ul>\r\n<h2>Java Identifiers</h2>\r\n<p>All Java components require names. Names used for classes, variables, and methods are called <b>identifiers</b>.</p>\r\n<p>In Java, there are several points to remember about identifiers. They are as follows &minus;</p>\r\n<ul class="list">\r\n<li><p>All identifiers should begin with a letter (A to Z or a to z), currency character ($) or an underscore (_).</p></li>\r\n<li><p>After the first character, identifiers can have any combination of characters.</p></li>\r\n<li><p>A key word cannot be used as an identifier.</p></li>\r\n<li><p>Most importantly, identifiers are case sensitive.</p></li>\r\n<li><p>Examples of legal identifiers: age, $salary, _value, __1_value.</p></li>\r\n<li><p>Examples of illegal identifiers: 123abc, -salary.</p></li>\r\n</ul>\r\n<h2>Java Modifiers</h2>\r\n<p>Like other languages, it is possible to modify classes, methods, etc., by using modifiers. There are two categories of modifiers &minus;</p>\r\n<ul class="list">\r\n<li><p><b>Access Modifiers</b> &minus; default, public , protected, private</p></li>\r\n<li><p><b>Non-access Modifiers</b> &minus; final, abstract, strictfp</p></li>\r\n</ul>\r\n<p>We will be looking into more details about modifiers in the next section.</p>\r\n<h2>Java Variables</h2>\r\n<p>Following are the types of variables in Java &minus;</p>\r\n<ul class="list">\r\n<li>Local Variables</li>\r\n<li>Class Variables (Static Variables)</li>\r\n<li>Instance Variables (Non-static Variables)</li>\r\n</ul>\r\n<h2>Java Arrays</h2>\r\n<p>Arrays are objects that store multiple variables of the same type. However, an array itself is an object on the heap. We will look into how to declare, construct, and initialize in the upcoming chapters.</p>\r\n<h2>Java Enums</h2>\r\n<p>Enums were introduced in Java 5.0. Enums restrict a variable to have one of only a few predefined values. The values in this enumerated list are called enums.</p>\r\n<p>With the use of enums it is possible to reduce the number of bugs in your code.</p>\r\n<p>For example, if we consider an application for a fresh juice shop, it would be possible to restrict the glass size to small, medium, and large. This would make sure that it would not allow anyone to order any size other than small, medium, or large.</p>\r\n<h3>Example</h3>\r\n<a href="http://tpcg.io/VNJ9DE" target="_blank" class="demo" rel="nofollow"><i class="fa-external-link"></i> Live Demo</a>\r\n<pre class="prettyprint notranslate">\r\nclass FreshJuice {\r\n   enum FreshJuiceSize{ SMALL, MEDIUM, LARGE }\r\n   FreshJuiceSize size;\r\n}\r\n\r\npublic class FreshJuiceTest {\r\n\r\n   public static void main(String args[]) {\r\n      FreshJuice juice = new FreshJuice();\r\n      juice.size = FreshJuice.FreshJuiceSize.MEDIUM ;\r\n      System.out.println("Size: " + juice.size);\r\n   }\r\n}\r\n</pre>\r\n<p>The above example will produce the following result &minus;</p>\r\n<h3>Output</h3>\r\n<pre class="result notranslate">\r\nSize: MEDIUM\r\n</pre>\r\n<p><b>Note</b> &minus; Enums can be declared as their own or inside a class. Methods, variables, constructors can be defined inside enums as well.</p>\r\n<h2>Java Keywords</h2>\r\n<p>The following list shows the reserved words in Java. These reserved words may not be used as constant or variable or any other identifier names.</p>\r\n<table class="table table-bordered" style="text-align:center;">\r\n<tr>\r\n<td>abstract</td>\r\n<td>assert</td>\r\n<td>boolean</td>\r\n<td>break</td>\r\n</tr>\r\n<tr>\r\n<td>byte</td>\r\n<td>case</td>\r\n<td>catch</td>\r\n<td>char</td>\r\n</tr>\r\n<tr>\r\n<td>class</td>\r\n<td>const</td>\r\n<td>continue</td>\r\n<td>default</td>\r\n</tr>\r\n<tr>\r\n<td>do</td>\r\n<td>double</td>\r\n<td>else</td>\r\n<td>enum</td>\r\n</tr>\r\n<tr>\r\n<td>extends</td>\r\n<td>final</td>\r\n<td>finally</td>\r\n<td>float</td>\r\n</tr>\r\n<tr>\r\n<td>for</td>\r\n<td>goto</td>\r\n<td>if</td>\r\n<td>implements</td>\r\n</tr>\r\n<tr>\r\n<td>import</td>\r\n<td>instanceof</td>\r\n<td>int</td>\r\n<td>interface</td>\r\n</tr>\r\n<tr>\r\n<td>long</td>\r\n<td>native</td>\r\n<td>new</td>\r\n<td>package</td>\r\n</tr>\r\n<tr>\r\n<td>private</td>\r\n<td>protected</td>\r\n<td>public</td>\r\n<td>return</td>\r\n</tr>\r\n<tr>\r\n<td>short</td>\r\n<td>static</td>\r\n<td>strictfp</td>\r\n<td>super</td>\r\n</tr>\r\n<tr>\r\n<td>switch</td>\r\n<td>synchronized</td>\r\n<td>this</td>\r\n<td>throw</td>\r\n</tr>\r\n<tr>\r\n<td>throws</td>\r\n<td>transient</td>\r\n<td>try</td>\r\n<td>void</td>\r\n</tr>\r\n<tr>\r\n<td>volatile</td>\r\n<td>while</td>\r\n<td></td>\r\n<td></td>\r\n</tr>\r\n</table>\r\n<h2>Comments in Java</h2>\r\n<p>Java supports single-line and multi-line comments very similar to C and C&plus;&plus;. All characters available inside any comment are ignored by Java compiler.</p>\r\n<h3>Example</h3>\r\n<a href="http://tpcg.io/RVBY2x" target="_blank" class="demo" rel="nofollow"><i class="fa-external-link"></i> Live Demo</a>\r\n<pre class="prettyprint notranslate">\r\npublic class MyFirstJavaProgram {\r\n\r\n   /* This is my first java program.\r\n    * This will print ''Hello World'' as the output\r\n    * This is an example of multi-line comments.\r\n    */\r\n\r\n   public static void main(String []args) {\r\n      // This is an example of single line comment\r\n      /* This is also an example of single line comment. */\r\n      System.out.println("Hello World");\r\n   }\r\n}\r\n</pre>\r\n<h3>Output</h3>\r\n<pre class="result notranslate">\r\nHello World\r\n</pre>\r\n<h2>Using Blank Lines</h2>\r\n<p>A line containing only white space, possibly with a comment, is known as a blank line, and Java totally ignores it.</p>\r\n<h2>Inheritance</h2>\r\n<p>In Java, classes can be derived from classes. Basically, if you need to create a new class and here is already a class that has some of the code you require, then it is possible to derive your new class from the already existing code.</p>\r\n<p>This concept allows you to reuse the fields and methods of the existing class without having to rewrite the code in a new class. In this scenario, the existing class is called the <b>superclass</b> and the derived class is called the <b>subclass</b>.</p>\r\n<h2>Interfaces</h2>\r\n<p>In Java language, an interface can be defined as a contract between objects on how to communicate with each other. Interfaces play a vital role when it comes to the concept of inheritance.</p>\r\n<p>An interface defines the methods, a deriving class (subclass) should use. But the implementation of the methods is totally up to the subclass.</p>\r\n<h2>What is Next?</h2>\r\n<p>The next section explains about Objects and classes in Java programming. At the end of the session, you will be able to get a clear picture as to what are objects and what are classes in Java.</p>\r\n<hr />'),
(21, 2, 3, 'Java - Basic Datatypes\r\n', '<hr />\r\n<p>Variables are nothing but reserved memory locations to store values. This means that when you create a variable you reserve some space in the memory.</p>\r\n<p>Based on the data type of a variable, the operating system allocates memory and decides what can be stored in the reserved memory. Therefore, by assigning different data types to variables, you can store integers, decimals, or characters in these variables.</p>\r\n<p>There are two data types available in Java &minus;</p>\r\n<ul class="list">\r\n<li>Primitive Data Types</li>\r\n<li>Reference/Object Data Types</li>\r\n</ul>\r\n<h2>Primitive Data Types</h2>\r\n<p>There are eight primitive datatypes supported by Java. Primitive datatypes are predefined by the language and named by a keyword. Let us now look into the eight primitive data types in detail.</p>\r\n<h3>byte</h3>\r\n<ul class="list">\r\n<li><p>Byte data type is an 8-bit signed two''s complement integer</p></li>\r\n<li><p>Minimum value is -128 (-2&#94;7)</p></li>\r\n<li><p>Maximum value is 127 (inclusive)(2&#94;7 -1)</p></li>\r\n<li><p>Default value is 0</p></li>\r\n<li><p>Byte data type is used to save space in large arrays, mainly in place of integers, since a byte is four times smaller than an integer.</p></li>\r\n<li><p>Example: byte a = 100, byte b = -50</p></li>\r\n</ul>\r\n<h3>short</h3>\r\n<ul class="list">\r\n<li><p>Short data type is a 16-bit signed two''s complement integer</p></li>\r\n<li><p>Minimum value is -32,768 (-2&#94;15)</p></li>\r\n<li><p>Maximum value is 32,767 (inclusive) (2&#94;15 -1)</p></li>\r\n<li><p>Short data type can also be used to save memory as byte data type. A short is 2 times smaller than an integer</p></li>\r\n<li><p>Default value is 0.</p></li>\r\n<li><p>Example: short  s = 10000, short r = -20000</p></li>\r\n</ul>\r\n<h3>int</h3>\r\n<ul class="list">\r\n<li><p>Int data type is a 32-bit signed two''s complement integer.</p></li>\r\n<li><p>Minimum value is - 2,147,483,648 (-2&#94;31)</p></li>\r\n<li><p>Maximum value is 2,147,483,647(inclusive) (2&#94;31 -1)</p></li>\r\n<li><p>Integer is generally used as the default data type for integral values unless there is a concern about memory.</p></li>\r\n<li><p>The default value is 0</p></li>\r\n<li><p>Example: int a = 100000, int b = -200000</p></li>\r\n</ul>\r\n<h3>long</h3>\r\n<ul class="list">\r\n<li>Long data type is a 64-bit signed two''s complement integer</li>\r\n<li>Minimum value is -9,223,372,036,854,775,808(-2&#94;63)</li>\r\n<li>Maximum value is 9,223,372,036,854,775,807 (inclusive)(2&#94;63 -1)</li>\r\n<li>This type is used when a wider range than int is needed</li>\r\n<li>Default value is 0L</li>\r\n<li>Example: long a = 100000L, long b = -200000L</li>\r\n</ul>\r\n<h3>float</h3>\r\n<ul class="list">\r\n<li><p>Float data type is a single-precision 32-bit IEEE 754 floating point</p></li>\r\n<li><p>Float is mainly used to save memory in large arrays of floating point numbers</p></li>\r\n<li><p>Default value is 0.0f</p></li>\r\n<li><p>Float data type is never used for precise values such as currency</p></li>\r\n<li><p>Example: float f1 = 234.5f</p></li>\r\n</ul>\r\n<h3>double</h3>\r\n<ul class="list">\r\n<li><p>double data type is a double-precision 64-bit IEEE 754 floating point</p></li> \r\n<li><p>This data type is generally used as the default data type for decimal values, generally the default choice</p></li>\r\n<li><p>Double data type should never be used for precise values such as currency</p></li>\r\n<li><p>Default value is 0.0d</p></li>\r\n<li><p>Example: double d1 = 123.4</p></li>\r\n</ul>\r\n<h3>boolean</h3>\r\n<ul class="list">\r\n<li>boolean data type represents one bit of information</li>\r\n<li>There are only two possible values: true and false</li>\r\n<li>This data type is used for simple flags that track true/false conditions</li>\r\n<li>Default value is false</li>\r\n<li>Example: boolean one = true</li>\r\n</ul>\r\n<h3>char</h3>\r\n<ul class="list">\r\n<li>char data type is a single 16-bit Unicode character</li>\r\n<li>Minimum value is ''\\u0000'' (or 0)</li>\r\n<li>Maximum value is  ''\\uffff'' (or 65,535 inclusive)</li>\r\n<li>Char data type is used to store any character</li> \r\n<li>Example: char letterA = ''A''</li>\r\n</ul>\r\n<h2>Reference Datatypes</h2>\r\n<ul class="list">\r\n<li><p>Reference variables are created using defined constructors of the classes. They are used to access objects. These variables are declared to be of a specific type that cannot be changed. For example, Employee, Puppy, etc.</p></li> \r\n<li><p>Class objects and various type of array variables come under reference datatype.</p></li>\r\n<li><p>Default value of any reference variable is null.</p></li> \r\n<li><p>A reference variable can be used to refer any object of the declared type or any compatible type.</p></li> \r\n<li><p>Example: Animal animal = new Animal("giraffe");</p></li> \r\n</ul>\r\n<h2>Java Literals</h2>\r\n<p>A literal is a source code representation of a fixed value. They are represented directly in the code without any computation.</p>\r\n<p>Literals can be assigned to any primitive type variable. For example &minus;</p>\r\n<pre class="prettyprint notranslate">\r\nbyte a = 68;\r\nchar a = ''A'';\r\n</pre>\r\n<p>byte, int, long, and short can be expressed in decimal(base 10), hexadecimal(base 16) or octal(base 8) number systems as well.</p>\r\n<p>Prefix 0 is used to indicate octal, and prefix 0x indicates hexadecimal when using these number systems for literals. For example &minus;</p>\r\n<pre class="prettyprint notranslate">\r\nint decimal = 100;\r\nint octal = 0144;\r\nint hexa =  0x64;\r\n</pre>\r\n<p>String literals in Java are specified like they are in most other languages by enclosing a sequence of characters between a pair of double quotes. Examples of string literals are &minus;</p>\r\n<h3>Example</h3>\r\n<pre class="prettyprint notranslate">\r\n"Hello World"\r\n"two\\nlines"\r\n"\\"This is in quotes\\""\r\n</pre>\r\n<p>String and char types of literals can contain any Unicode characters. For example &minus;</p>\r\n<pre class="prettyprint notranslate">\r\nchar a = ''\\u0001'';\r\nString a = "\\u0001";\r\n</pre>\r\n<p>Java language supports few special escape sequences for String and char literals as well. They are &minus;</p>\r\n<table class="table table-bordered" style="text-align:center;">\r\n<tr>\r\n<th style="text-align:center;">Notation</th>\r\n<th style="text-align:center;">Character represented</th>\r\n</tr>\r\n<tr>\r\n<td>\\n</td>\r\n<td>Newline (0x0a)</td>\r\n</tr>\r\n<tr>\r\n<td>\\r</td>\r\n<td>Carriage return (0x0d)</td>\r\n</tr>\r\n<tr>\r\n<td>\\f</td>\r\n<td>Formfeed (0x0c)</td>\r\n</tr>\r\n<tr>\r\n<td>\\b</td>\r\n<td>Backspace (0x08)</td>\r\n</tr>\r\n<tr>\r\n<td>\\s</td>\r\n<td>Space (0x20)</td>\r\n</tr>\r\n<tr>\r\n<td>\\t</td>\r\n<td>tab</td>\r\n</tr>\r\n<tr>\r\n<td>\\" </td>\r\n<td>Double quote</td>\r\n</tr>\r\n<tr>\r\n<td>\\''</td>\r\n<td>Single quote</td>\r\n</tr>\r\n<tr>\r\n<td>\\\\</td>\r\n<td>backslash</td>\r\n</tr>\r\n<tr>\r\n<td>\\ddd</td>\r\n<td>Octal character (ddd)</td>\r\n</tr>\r\n<tr>\r\n<td>\\uxxxx</td>\r\n<td>Hexadecimal UNICODE character (xxxx)</td>\r\n</tr>\r\n</table>\r\n<h2>What is Next?</h2>\r\n<p>This chapter explained the various data types. The next topic explains different variable types and their usage. This will give you a good understanding on how they can be used in the Java classes, interfaces, etc.</p>\r\n<hr />');

--
-- Indexes for dumped tables
--

--
-- Indexes for table `content`
--
ALTER TABLE `content`
  ADD PRIMARY KEY (`id`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `content`
--
ALTER TABLE `content`
  MODIFY `id` int(3) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=22;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
